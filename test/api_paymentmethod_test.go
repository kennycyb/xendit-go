/*
Payment Method Service v2_test

Testing PaymentmethodApiService

*/

// Code generated by OpenAPI Generator

package xendit

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	xendit "github.com/kennycyb/xendit-go"
)

func Test_xendit_PaymentmethodApiService(t *testing.T) {

	apiKey := os.Getenv("XND_APIKEY")
	if apiKey == "" {
		t.Skip("XND_APIKEY not set")
	}
	
	apiClient := xendit.NewClient(apiKey)

	t.Run("Test PaymentmethodApiService AuthPaymentMethod", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.AuthPaymentMethod(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService CreatePaymentMethod", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentmethodApi.CreatePaymentMethod(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService ExpirePaymentMethod", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.ExpirePaymentMethod(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService GetAllPaymentChannels", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentmethodApi.GetAllPaymentChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService GetAllPaymentMethods", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentmethodApi.GetAllPaymentMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService GetPaymentMethodByID", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.GetPaymentMethodByID(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService PatchPaymentMethods", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.PatchPaymentMethods(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService PublicGetPaymentsByPaymentMethodId", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.PublicGetPaymentsByPaymentMethodId(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService PublicSimulatePaymentByPaymentMethodId", func(t *testing.T) {

		var paymentMethodId string

		resp, httpRes, err := apiClient.PaymentmethodApi.PublicSimulatePaymentByPaymentMethodId(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentmethodApiService PublicSimulatePaymentChannelHealth", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentmethodApi.PublicSimulatePaymentChannelHealth(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
