/*
Charge_test

Testing PaymentrequestApiService

*/

// Code generated by OpenAPI Generator

package xendit

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	xendit "github.com/kennycyb/xendit-go"
)

func Test_xendit_PaymentrequestApiService(t *testing.T) {

	apiKey := os.Getenv("XND_APIKEY")
	if apiKey == "" {
		t.Skip("XND_APIKEY not set")
	}
	
	apiClient := xendit.NewClient(apiKey)

	t.Run("Test PaymentrequestApiService CreatePaymentRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentrequestApi.CreatePaymentRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService GetAllPaymentRequests", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaymentrequestApi.GetAllPaymentRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService GetPaymentRequestByID", func(t *testing.T) {

		var paymentRequestId string

		resp, httpRes, err := apiClient.PaymentrequestApi.GetPaymentRequestByID(context.Background(), paymentRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService GetPaymentRequestCapture", func(t *testing.T) {

		var paymentRequestId string

		resp, httpRes, err := apiClient.PaymentrequestApi.GetPaymentRequestCapture(context.Background(), paymentRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService PaymentRequestAuthorize", func(t *testing.T) {

		var paymentRequestId string

		resp, httpRes, err := apiClient.PaymentrequestApi.PaymentRequestAuthorize(context.Background(), paymentRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService PaymentRequestCapture", func(t *testing.T) {

		var paymentRequestId string

		resp, httpRes, err := apiClient.PaymentrequestApi.PaymentRequestCapture(context.Background(), paymentRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentrequestApiService PaymentRequestResendAuth", func(t *testing.T) {

		var paymentRequestId string

		resp, httpRes, err := apiClient.PaymentrequestApi.PaymentRequestResendAuth(context.Background(), paymentRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
