/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the OtpConfirmation type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &OtpConfirmation{}

// OtpConfirmation struct for OtpConfirmation
type OtpConfirmation struct {
	Success *string `json:"success,omitempty"`
	Failure *string `json:"failure,omitempty"`
}

// NewOtpConfirmation instantiates a new OtpConfirmation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtpConfirmation() *OtpConfirmation {
	this := OtpConfirmation{}
	return &this
}

// NewOtpConfirmationWithDefaults instantiates a new OtpConfirmation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtpConfirmationWithDefaults() *OtpConfirmation {
	this := OtpConfirmation{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *OtpConfirmation) GetSuccess() string {
	if o == nil || utils.IsNil(o.Success) {
		var ret string
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtpConfirmation) GetSuccessOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *OtpConfirmation) HasSuccess() bool {
	if o != nil && !utils.IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given string and assigns it to the Success field.
func (o *OtpConfirmation) SetSuccess(v string) {
	o.Success = &v
}

// GetFailure returns the Failure field value if set, zero value otherwise.
func (o *OtpConfirmation) GetFailure() string {
	if o == nil || utils.IsNil(o.Failure) {
		var ret string
		return ret
	}
	return *o.Failure
}

// GetFailureOk returns a tuple with the Failure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtpConfirmation) GetFailureOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Failure) {
		return nil, false
	}
	return o.Failure, true
}

// HasFailure returns a boolean if a field has been set.
func (o *OtpConfirmation) HasFailure() bool {
	if o != nil && !utils.IsNil(o.Failure) {
		return true
	}

	return false
}

// SetFailure gets a reference to the given string and assigns it to the Failure field.
func (o *OtpConfirmation) SetFailure(v string) {
	o.Failure = &v
}

func (o OtpConfirmation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtpConfirmation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !utils.IsNil(o.Failure) {
		toSerialize["failure"] = o.Failure
	}
	return toSerialize, nil
}

type NullableOtpConfirmation struct {
	value *OtpConfirmation
	isSet bool
}

func (v NullableOtpConfirmation) Get() *OtpConfirmation {
	return v.value
}

func (v *NullableOtpConfirmation) Set(val *OtpConfirmation) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpConfirmation) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpConfirmation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpConfirmation(val *OtpConfirmation) *NullableOtpConfirmation {
	return &NullableOtpConfirmation{value: val, isSet: true}
}

func (v NullableOtpConfirmation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpConfirmation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


