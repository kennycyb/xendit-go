/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the Payment type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Payment{}

// Payment struct for Payment
type Payment struct {
	Id *string `json:"id,omitempty"`
	BusinessId *string `json:"business_id,omitempty"`
	InstrumentId *string `json:"instrument_id,omitempty"`
	Type *string `json:"type,omitempty"`
	PaymentRequestId *string `json:"payment_request_id,omitempty"`
	ReferenceId *string `json:"reference_id,omitempty"`
	ChannelCode *string `json:"channel_code,omitempty"`
	Country *PaymentRequestCountry `json:"country,omitempty"`
	Status *string `json:"status,omitempty"`
	Amount *float64 `json:"amount,omitempty"`
	Currency *PaymentRequestCurrency `json:"currency,omitempty"`
	PaymentDetail map[string]interface{} `json:"payment_detail,omitempty"`
	PaymentMethod *PublicPaymentMethod `json:"payment_method,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Created *string `json:"created,omitempty"`
	Updated *string `json:"updated,omitempty"`
}

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment() *Payment {
	this := Payment{}
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Payment) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Payment) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Payment) SetId(v string) {
	o.Id = &v
}

// GetBusinessId returns the BusinessId field value if set, zero value otherwise.
func (o *Payment) GetBusinessId() string {
	if o == nil || utils.IsNil(o.BusinessId) {
		var ret string
		return ret
	}
	return *o.BusinessId
}

// GetBusinessIdOk returns a tuple with the BusinessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBusinessIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BusinessId) {
		return nil, false
	}
	return o.BusinessId, true
}

// HasBusinessId returns a boolean if a field has been set.
func (o *Payment) HasBusinessId() bool {
	if o != nil && !utils.IsNil(o.BusinessId) {
		return true
	}

	return false
}

// SetBusinessId gets a reference to the given string and assigns it to the BusinessId field.
func (o *Payment) SetBusinessId(v string) {
	o.BusinessId = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *Payment) GetInstrumentId() string {
	if o == nil || utils.IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetInstrumentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *Payment) HasInstrumentId() bool {
	if o != nil && !utils.IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *Payment) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Payment) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Payment) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Payment) SetType(v string) {
	o.Type = &v
}

// GetPaymentRequestId returns the PaymentRequestId field value if set, zero value otherwise.
func (o *Payment) GetPaymentRequestId() string {
	if o == nil || utils.IsNil(o.PaymentRequestId) {
		var ret string
		return ret
	}
	return *o.PaymentRequestId
}

// GetPaymentRequestIdOk returns a tuple with the PaymentRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentRequestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PaymentRequestId) {
		return nil, false
	}
	return o.PaymentRequestId, true
}

// HasPaymentRequestId returns a boolean if a field has been set.
func (o *Payment) HasPaymentRequestId() bool {
	if o != nil && !utils.IsNil(o.PaymentRequestId) {
		return true
	}

	return false
}

// SetPaymentRequestId gets a reference to the given string and assigns it to the PaymentRequestId field.
func (o *Payment) SetPaymentRequestId(v string) {
	o.PaymentRequestId = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *Payment) GetReferenceId() string {
	if o == nil || utils.IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetReferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *Payment) HasReferenceId() bool {
	if o != nil && !utils.IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *Payment) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetChannelCode returns the ChannelCode field value if set, zero value otherwise.
func (o *Payment) GetChannelCode() string {
	if o == nil || utils.IsNil(o.ChannelCode) {
		var ret string
		return ret
	}
	return *o.ChannelCode
}

// GetChannelCodeOk returns a tuple with the ChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetChannelCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ChannelCode) {
		return nil, false
	}
	return o.ChannelCode, true
}

// HasChannelCode returns a boolean if a field has been set.
func (o *Payment) HasChannelCode() bool {
	if o != nil && !utils.IsNil(o.ChannelCode) {
		return true
	}

	return false
}

// SetChannelCode gets a reference to the given string and assigns it to the ChannelCode field.
func (o *Payment) SetChannelCode(v string) {
	o.ChannelCode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Payment) GetCountry() PaymentRequestCountry {
	if o == nil || utils.IsNil(o.Country) {
		var ret PaymentRequestCountry
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCountryOk() (*PaymentRequestCountry, bool) {
	if o == nil || utils.IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Payment) HasCountry() bool {
	if o != nil && !utils.IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given PaymentRequestCountry and assigns it to the Country field.
func (o *Payment) SetCountry(v PaymentRequestCountry) {
	o.Country = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Payment) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Payment) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Payment) SetStatus(v string) {
	o.Status = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Payment) GetAmount() float64 {
	if o == nil || utils.IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Payment) HasAmount() bool {
	if o != nil && !utils.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *Payment) SetAmount(v float64) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Payment) GetCurrency() PaymentRequestCurrency {
	if o == nil || utils.IsNil(o.Currency) {
		var ret PaymentRequestCurrency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCurrencyOk() (*PaymentRequestCurrency, bool) {
	if o == nil || utils.IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Payment) HasCurrency() bool {
	if o != nil && !utils.IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given PaymentRequestCurrency and assigns it to the Currency field.
func (o *Payment) SetCurrency(v PaymentRequestCurrency) {
	o.Currency = &v
}

// GetPaymentDetail returns the PaymentDetail field value if set, zero value otherwise.
func (o *Payment) GetPaymentDetail() map[string]interface{} {
	if o == nil || utils.IsNil(o.PaymentDetail) {
		var ret map[string]interface{}
		return ret
	}
	return o.PaymentDetail
}

// GetPaymentDetailOk returns a tuple with the PaymentDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentDetailOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.PaymentDetail) {
		return map[string]interface{}{}, false
	}
	return o.PaymentDetail, true
}

// HasPaymentDetail returns a boolean if a field has been set.
func (o *Payment) HasPaymentDetail() bool {
	if o != nil && !utils.IsNil(o.PaymentDetail) {
		return true
	}

	return false
}

// SetPaymentDetail gets a reference to the given map[string]interface{} and assigns it to the PaymentDetail field.
func (o *Payment) SetPaymentDetail(v map[string]interface{}) {
	o.PaymentDetail = v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *Payment) GetPaymentMethod() PublicPaymentMethod {
	if o == nil || utils.IsNil(o.PaymentMethod) {
		var ret PublicPaymentMethod
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentMethodOk() (*PublicPaymentMethod, bool) {
	if o == nil || utils.IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *Payment) HasPaymentMethod() bool {
	if o != nil && !utils.IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PublicPaymentMethod and assigns it to the PaymentMethod field.
func (o *Payment) SetPaymentMethod(v PublicPaymentMethod) {
	o.PaymentMethod = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Payment) HasMetadata() bool {
	if o != nil && utils.IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Payment) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Payment) GetCreated() string {
	if o == nil || utils.IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreatedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Payment) HasCreated() bool {
	if o != nil && !utils.IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Payment) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Payment) GetUpdated() string {
	if o == nil || utils.IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetUpdatedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Payment) HasUpdated() bool {
	if o != nil && !utils.IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Payment) SetUpdated(v string) {
	o.Updated = &v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.BusinessId) {
		toSerialize["business_id"] = o.BusinessId
	}
	if !utils.IsNil(o.InstrumentId) {
		toSerialize["instrument_id"] = o.InstrumentId
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.PaymentRequestId) {
		toSerialize["payment_request_id"] = o.PaymentRequestId
	}
	if !utils.IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !utils.IsNil(o.ChannelCode) {
		toSerialize["channel_code"] = o.ChannelCode
	}
	if !utils.IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !utils.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !utils.IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !utils.IsNil(o.PaymentDetail) {
		toSerialize["payment_detail"] = o.PaymentDetail
	}
	if !utils.IsNil(o.PaymentMethod) {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !utils.IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !utils.IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


