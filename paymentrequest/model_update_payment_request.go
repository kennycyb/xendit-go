/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the UpdatePaymentRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UpdatePaymentRequest{}

// UpdatePaymentRequest struct for UpdatePaymentRequest
type UpdatePaymentRequest struct {
	Status *PaymentRequestStatus `json:"status,omitempty"`
	Actions []PaymentRequestAction `json:"actions,omitempty"`
	InstrumentId *string `json:"instrument_id,omitempty"`
	Initiator *string `json:"initiator,omitempty"`
}

// NewUpdatePaymentRequest instantiates a new UpdatePaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePaymentRequest() *UpdatePaymentRequest {
	this := UpdatePaymentRequest{}
	return &this
}

// NewUpdatePaymentRequestWithDefaults instantiates a new UpdatePaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePaymentRequestWithDefaults() *UpdatePaymentRequest {
	this := UpdatePaymentRequest{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdatePaymentRequest) GetStatus() PaymentRequestStatus {
	if o == nil || utils.IsNil(o.Status) {
		var ret PaymentRequestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentRequest) GetStatusOk() (*PaymentRequestStatus, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdatePaymentRequest) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PaymentRequestStatus and assigns it to the Status field.
func (o *UpdatePaymentRequest) SetStatus(v PaymentRequestStatus) {
	o.Status = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *UpdatePaymentRequest) GetActions() []PaymentRequestAction {
	if o == nil || utils.IsNil(o.Actions) {
		var ret []PaymentRequestAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentRequest) GetActionsOk() ([]PaymentRequestAction, bool) {
	if o == nil || utils.IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *UpdatePaymentRequest) HasActions() bool {
	if o != nil && !utils.IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []PaymentRequestAction and assigns it to the Actions field.
func (o *UpdatePaymentRequest) SetActions(v []PaymentRequestAction) {
	o.Actions = v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *UpdatePaymentRequest) GetInstrumentId() string {
	if o == nil || utils.IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentRequest) GetInstrumentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *UpdatePaymentRequest) HasInstrumentId() bool {
	if o != nil && !utils.IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *UpdatePaymentRequest) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *UpdatePaymentRequest) GetInitiator() string {
	if o == nil || utils.IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentRequest) GetInitiatorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *UpdatePaymentRequest) HasInitiator() bool {
	if o != nil && !utils.IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *UpdatePaymentRequest) SetInitiator(v string) {
	o.Initiator = &v
}

func (o UpdatePaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePaymentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !utils.IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !utils.IsNil(o.InstrumentId) {
		toSerialize["instrument_id"] = o.InstrumentId
	}
	if !utils.IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

type NullableUpdatePaymentRequest struct {
	value *UpdatePaymentRequest
	isSet bool
}

func (v NullableUpdatePaymentRequest) Get() *UpdatePaymentRequest {
	return v.value
}

func (v *NullableUpdatePaymentRequest) Set(val *UpdatePaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePaymentRequest(val *UpdatePaymentRequest) *NullableUpdatePaymentRequest {
	return &NullableUpdatePaymentRequest{value: val, isSet: true}
}

func (v NullableUpdatePaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


