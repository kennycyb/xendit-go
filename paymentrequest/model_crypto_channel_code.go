/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	"fmt"
)

// CryptoChannelCode Cryptocurrency Channel Code
type CryptoChannelCode string

// List of CryptoChannelCode
const (
	CRYPTOCHANNELCODE_BTC CryptoChannelCode = "BTC"
	CRYPTOCHANNELCODE_ETH CryptoChannelCode = "ETH"
	CRYPTOCHANNELCODE_USDC CryptoChannelCode = "USDC"
)

// All allowed values of CryptoChannelCode enum
var AllowedCryptoChannelCodeEnumValues = []CryptoChannelCode{
	"BTC",
	"ETH",
	"USDC",
}

func (v *CryptoChannelCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CryptoChannelCode(value)
	for _, existing := range AllowedCryptoChannelCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CryptoChannelCode", value)
}

// NewCryptoChannelCodeFromValue returns a pointer to a valid CryptoChannelCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCryptoChannelCodeFromValue(v string) (*CryptoChannelCode, error) {
	ev := CryptoChannelCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CryptoChannelCode: valid values are %v", v, AllowedCryptoChannelCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CryptoChannelCode) IsValid() bool {
	for _, existing := range AllowedCryptoChannelCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CryptoChannelCode value
func (v CryptoChannelCode) Ptr() *CryptoChannelCode {
	return &v
}

type NullableCryptoChannelCode struct {
	value *CryptoChannelCode
	isSet bool
}

func (v NullableCryptoChannelCode) Get() *CryptoChannelCode {
	return v.value
}

func (v *NullableCryptoChannelCode) Set(val *CryptoChannelCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoChannelCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoChannelCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoChannelCode(val *CryptoChannelCode) *NullableCryptoChannelCode {
	return &NullableCryptoChannelCode{value: val, isSet: true}
}

func (v NullableCryptoChannelCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoChannelCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

