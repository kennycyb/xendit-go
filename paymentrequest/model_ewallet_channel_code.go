/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	"fmt"
)

// EwalletChannelCode Ewallet Channel Code
type EwalletChannelCode string

// List of EwalletChannelCode
const (
	EWALLETCHANNELCODE_GCASH EwalletChannelCode = "GCASH"
	EWALLETCHANNELCODE_GRABPAY EwalletChannelCode = "GRABPAY"
	EWALLETCHANNELCODE_PAYMAYA EwalletChannelCode = "PAYMAYA"
	EWALLETCHANNELCODE_DANA EwalletChannelCode = "DANA"
	EWALLETCHANNELCODE_OVO EwalletChannelCode = "OVO"
	EWALLETCHANNELCODE_LINKAJA EwalletChannelCode = "LINKAJA"
	EWALLETCHANNELCODE_SHOPEEPAY EwalletChannelCode = "SHOPEEPAY"
	EWALLETCHANNELCODE_NEXCASH EwalletChannelCode = "NEXCASH"
	EWALLETCHANNELCODE_ASTRAPAY EwalletChannelCode = "ASTRAPAY"
	EWALLETCHANNELCODE_JENIUSPAY EwalletChannelCode = "JENIUSPAY"
	EWALLETCHANNELCODE_APPOTA EwalletChannelCode = "APPOTA"
	EWALLETCHANNELCODE_MOMO EwalletChannelCode = "MOMO"
	EWALLETCHANNELCODE_VNPTWALLET EwalletChannelCode = "VNPTWALLET"
	EWALLETCHANNELCODE_VIETTELPAY EwalletChannelCode = "VIETTELPAY"
	EWALLETCHANNELCODE_ZALOPAY EwalletChannelCode = "ZALOPAY"
)

// All allowed values of EwalletChannelCode enum
var AllowedEwalletChannelCodeEnumValues = []EwalletChannelCode{
	"GCASH",
	"GRABPAY",
	"PAYMAYA",
	"DANA",
	"OVO",
	"LINKAJA",
	"SHOPEEPAY",
	"NEXCASH",
	"ASTRAPAY",
	"JENIUSPAY",
	"APPOTA",
	"MOMO",
	"VNPTWALLET",
	"VIETTELPAY",
	"ZALOPAY",
}

func (v *EwalletChannelCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EwalletChannelCode(value)
	for _, existing := range AllowedEwalletChannelCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EwalletChannelCode", value)
}

// NewEwalletChannelCodeFromValue returns a pointer to a valid EwalletChannelCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEwalletChannelCodeFromValue(v string) (*EwalletChannelCode, error) {
	ev := EwalletChannelCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EwalletChannelCode: valid values are %v", v, AllowedEwalletChannelCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EwalletChannelCode) IsValid() bool {
	for _, existing := range AllowedEwalletChannelCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EwalletChannelCode value
func (v EwalletChannelCode) Ptr() *EwalletChannelCode {
	return &v
}

type NullableEwalletChannelCode struct {
	value *EwalletChannelCode
	isSet bool
}

func (v NullableEwalletChannelCode) Get() *EwalletChannelCode {
	return v.value
}

func (v *NullableEwalletChannelCode) Set(val *EwalletChannelCode) {
	v.value = val
	v.isSet = true
}

func (v NullableEwalletChannelCode) IsSet() bool {
	return v.isSet
}

func (v *NullableEwalletChannelCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEwalletChannelCode(val *EwalletChannelCode) *NullableEwalletChannelCode {
	return &NullableEwalletChannelCode{value: val, isSet: true}
}

func (v NullableEwalletChannelCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEwalletChannelCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

