/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the CryptoWallet type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CryptoWallet{}

// CryptoWallet Crypto Wallet
type CryptoWallet struct {
	Id NullableString `json:"id,omitempty"`
}

// NewCryptoWallet instantiates a new CryptoWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoWallet() *CryptoWallet {
	this := CryptoWallet{}
	return &this
}

// NewCryptoWalletWithDefaults instantiates a new CryptoWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoWalletWithDefaults() *CryptoWallet {
	this := CryptoWallet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CryptoWallet) GetId() string {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CryptoWallet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CryptoWallet) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CryptoWallet) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CryptoWallet) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CryptoWallet) UnsetId() {
	o.Id.Unset()
}

func (o CryptoWallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	return toSerialize, nil
}

type NullableCryptoWallet struct {
	value *CryptoWallet
	isSet bool
}

func (v NullableCryptoWallet) Get() *CryptoWallet {
	return v.value
}

func (v *NullableCryptoWallet) Set(val *CryptoWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoWallet(val *CryptoWallet) *NullableCryptoWallet {
	return &NullableCryptoWallet{value: val, isSet: true}
}

func (v NullableCryptoWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


