/*
Charge

This API is used for Charge

API version: 1.31.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentrequest

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PaymentMethod type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PaymentMethod{}

// PaymentMethod struct for PaymentMethod
type PaymentMethod struct {
	Type PaymentMethodType `json:"type"`
	Reusability PaymentMethodReusability `json:"reusability"`
	Description NullableString `json:"description,omitempty"`
	ReferenceId *string `json:"reference_id,omitempty"`
	Card NullableMutableCard `json:"card,omitempty"`
	Cryptocurrency NullableMutableCrypto `json:"cryptocurrency,omitempty"`
	DirectBankTransfer NullableMutableDirectBankTransfer `json:"direct_bank_transfer,omitempty"`
	DirectDebit NullableMutableDirectDebit `json:"direct_debit,omitempty"`
	Ewallet NullableMutableEwallet `json:"ewallet,omitempty"`
	OverTheCounter NullableMutableOverTheCounter `json:"over_the_counter,omitempty"`
	VirtualAccount NullableMutableVirtualAccount `json:"virtual_account,omitempty"`
	QrCode NullableMutableQRCode `json:"qr_code,omitempty"`
}

// NewPaymentMethod instantiates a new PaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethod(type_ PaymentMethodType, reusability PaymentMethodReusability) *PaymentMethod {
	this := PaymentMethod{}
	this.Type = type_
	this.Reusability = reusability
	return &this
}

// NewPaymentMethodWithDefaults instantiates a new PaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodWithDefaults() *PaymentMethod {
	this := PaymentMethod{}
	return &this
}

// GetType returns the Type field value
func (o *PaymentMethod) GetType() PaymentMethodType {
	if o == nil {
		var ret PaymentMethodType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetTypeOk() (*PaymentMethodType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethod) SetType(v PaymentMethodType) {
	o.Type = v
}

// GetReusability returns the Reusability field value
func (o *PaymentMethod) GetReusability() PaymentMethodReusability {
	if o == nil {
		var ret PaymentMethodReusability
		return ret
	}

	return o.Reusability
}

// GetReusabilityOk returns a tuple with the Reusability field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetReusabilityOk() (*PaymentMethodReusability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reusability, true
}

// SetReusability sets field value
func (o *PaymentMethod) SetReusability(v PaymentMethodReusability) {
	o.Reusability = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentMethod) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PaymentMethod) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PaymentMethod) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PaymentMethod) UnsetDescription() {
	o.Description.Unset()
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *PaymentMethod) GetReferenceId() string {
	if o == nil || utils.IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetReferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *PaymentMethod) HasReferenceId() bool {
	if o != nil && !utils.IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *PaymentMethod) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetCard returns the Card field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetCard() MutableCard {
	if o == nil || utils.IsNil(o.Card.Get()) {
		var ret MutableCard
		return ret
	}
	return *o.Card.Get()
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetCardOk() (*MutableCard, bool) {
	if o == nil {
		return nil, false
	}
	return o.Card.Get(), o.Card.IsSet()
}

// HasCard returns a boolean if a field has been set.
func (o *PaymentMethod) HasCard() bool {
	if o != nil && o.Card.IsSet() {
		return true
	}

	return false
}

// SetCard gets a reference to the given NullableMutableCard and assigns it to the Card field.
func (o *PaymentMethod) SetCard(v MutableCard) {
	o.Card.Set(&v)
}
// SetCardNil sets the value for Card to be an explicit nil
func (o *PaymentMethod) SetCardNil() {
	o.Card.Set(nil)
}

// UnsetCard ensures that no value is present for Card, not even an explicit nil
func (o *PaymentMethod) UnsetCard() {
	o.Card.Unset()
}

// GetCryptocurrency returns the Cryptocurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetCryptocurrency() MutableCrypto {
	if o == nil || utils.IsNil(o.Cryptocurrency.Get()) {
		var ret MutableCrypto
		return ret
	}
	return *o.Cryptocurrency.Get()
}

// GetCryptocurrencyOk returns a tuple with the Cryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetCryptocurrencyOk() (*MutableCrypto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cryptocurrency.Get(), o.Cryptocurrency.IsSet()
}

// HasCryptocurrency returns a boolean if a field has been set.
func (o *PaymentMethod) HasCryptocurrency() bool {
	if o != nil && o.Cryptocurrency.IsSet() {
		return true
	}

	return false
}

// SetCryptocurrency gets a reference to the given NullableMutableCrypto and assigns it to the Cryptocurrency field.
func (o *PaymentMethod) SetCryptocurrency(v MutableCrypto) {
	o.Cryptocurrency.Set(&v)
}
// SetCryptocurrencyNil sets the value for Cryptocurrency to be an explicit nil
func (o *PaymentMethod) SetCryptocurrencyNil() {
	o.Cryptocurrency.Set(nil)
}

// UnsetCryptocurrency ensures that no value is present for Cryptocurrency, not even an explicit nil
func (o *PaymentMethod) UnsetCryptocurrency() {
	o.Cryptocurrency.Unset()
}

// GetDirectBankTransfer returns the DirectBankTransfer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetDirectBankTransfer() MutableDirectBankTransfer {
	if o == nil || utils.IsNil(o.DirectBankTransfer.Get()) {
		var ret MutableDirectBankTransfer
		return ret
	}
	return *o.DirectBankTransfer.Get()
}

// GetDirectBankTransferOk returns a tuple with the DirectBankTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetDirectBankTransferOk() (*MutableDirectBankTransfer, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectBankTransfer.Get(), o.DirectBankTransfer.IsSet()
}

// HasDirectBankTransfer returns a boolean if a field has been set.
func (o *PaymentMethod) HasDirectBankTransfer() bool {
	if o != nil && o.DirectBankTransfer.IsSet() {
		return true
	}

	return false
}

// SetDirectBankTransfer gets a reference to the given NullableMutableDirectBankTransfer and assigns it to the DirectBankTransfer field.
func (o *PaymentMethod) SetDirectBankTransfer(v MutableDirectBankTransfer) {
	o.DirectBankTransfer.Set(&v)
}
// SetDirectBankTransferNil sets the value for DirectBankTransfer to be an explicit nil
func (o *PaymentMethod) SetDirectBankTransferNil() {
	o.DirectBankTransfer.Set(nil)
}

// UnsetDirectBankTransfer ensures that no value is present for DirectBankTransfer, not even an explicit nil
func (o *PaymentMethod) UnsetDirectBankTransfer() {
	o.DirectBankTransfer.Unset()
}

// GetDirectDebit returns the DirectDebit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetDirectDebit() MutableDirectDebit {
	if o == nil || utils.IsNil(o.DirectDebit.Get()) {
		var ret MutableDirectDebit
		return ret
	}
	return *o.DirectDebit.Get()
}

// GetDirectDebitOk returns a tuple with the DirectDebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetDirectDebitOk() (*MutableDirectDebit, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectDebit.Get(), o.DirectDebit.IsSet()
}

// HasDirectDebit returns a boolean if a field has been set.
func (o *PaymentMethod) HasDirectDebit() bool {
	if o != nil && o.DirectDebit.IsSet() {
		return true
	}

	return false
}

// SetDirectDebit gets a reference to the given NullableMutableDirectDebit and assigns it to the DirectDebit field.
func (o *PaymentMethod) SetDirectDebit(v MutableDirectDebit) {
	o.DirectDebit.Set(&v)
}
// SetDirectDebitNil sets the value for DirectDebit to be an explicit nil
func (o *PaymentMethod) SetDirectDebitNil() {
	o.DirectDebit.Set(nil)
}

// UnsetDirectDebit ensures that no value is present for DirectDebit, not even an explicit nil
func (o *PaymentMethod) UnsetDirectDebit() {
	o.DirectDebit.Unset()
}

// GetEwallet returns the Ewallet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetEwallet() MutableEwallet {
	if o == nil || utils.IsNil(o.Ewallet.Get()) {
		var ret MutableEwallet
		return ret
	}
	return *o.Ewallet.Get()
}

// GetEwalletOk returns a tuple with the Ewallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetEwalletOk() (*MutableEwallet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ewallet.Get(), o.Ewallet.IsSet()
}

// HasEwallet returns a boolean if a field has been set.
func (o *PaymentMethod) HasEwallet() bool {
	if o != nil && o.Ewallet.IsSet() {
		return true
	}

	return false
}

// SetEwallet gets a reference to the given NullableMutableEwallet and assigns it to the Ewallet field.
func (o *PaymentMethod) SetEwallet(v MutableEwallet) {
	o.Ewallet.Set(&v)
}
// SetEwalletNil sets the value for Ewallet to be an explicit nil
func (o *PaymentMethod) SetEwalletNil() {
	o.Ewallet.Set(nil)
}

// UnsetEwallet ensures that no value is present for Ewallet, not even an explicit nil
func (o *PaymentMethod) UnsetEwallet() {
	o.Ewallet.Unset()
}

// GetOverTheCounter returns the OverTheCounter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetOverTheCounter() MutableOverTheCounter {
	if o == nil || utils.IsNil(o.OverTheCounter.Get()) {
		var ret MutableOverTheCounter
		return ret
	}
	return *o.OverTheCounter.Get()
}

// GetOverTheCounterOk returns a tuple with the OverTheCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetOverTheCounterOk() (*MutableOverTheCounter, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverTheCounter.Get(), o.OverTheCounter.IsSet()
}

// HasOverTheCounter returns a boolean if a field has been set.
func (o *PaymentMethod) HasOverTheCounter() bool {
	if o != nil && o.OverTheCounter.IsSet() {
		return true
	}

	return false
}

// SetOverTheCounter gets a reference to the given NullableMutableOverTheCounter and assigns it to the OverTheCounter field.
func (o *PaymentMethod) SetOverTheCounter(v MutableOverTheCounter) {
	o.OverTheCounter.Set(&v)
}
// SetOverTheCounterNil sets the value for OverTheCounter to be an explicit nil
func (o *PaymentMethod) SetOverTheCounterNil() {
	o.OverTheCounter.Set(nil)
}

// UnsetOverTheCounter ensures that no value is present for OverTheCounter, not even an explicit nil
func (o *PaymentMethod) UnsetOverTheCounter() {
	o.OverTheCounter.Unset()
}

// GetVirtualAccount returns the VirtualAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetVirtualAccount() MutableVirtualAccount {
	if o == nil || utils.IsNil(o.VirtualAccount.Get()) {
		var ret MutableVirtualAccount
		return ret
	}
	return *o.VirtualAccount.Get()
}

// GetVirtualAccountOk returns a tuple with the VirtualAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetVirtualAccountOk() (*MutableVirtualAccount, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualAccount.Get(), o.VirtualAccount.IsSet()
}

// HasVirtualAccount returns a boolean if a field has been set.
func (o *PaymentMethod) HasVirtualAccount() bool {
	if o != nil && o.VirtualAccount.IsSet() {
		return true
	}

	return false
}

// SetVirtualAccount gets a reference to the given NullableMutableVirtualAccount and assigns it to the VirtualAccount field.
func (o *PaymentMethod) SetVirtualAccount(v MutableVirtualAccount) {
	o.VirtualAccount.Set(&v)
}
// SetVirtualAccountNil sets the value for VirtualAccount to be an explicit nil
func (o *PaymentMethod) SetVirtualAccountNil() {
	o.VirtualAccount.Set(nil)
}

// UnsetVirtualAccount ensures that no value is present for VirtualAccount, not even an explicit nil
func (o *PaymentMethod) UnsetVirtualAccount() {
	o.VirtualAccount.Unset()
}

// GetQrCode returns the QrCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethod) GetQrCode() MutableQRCode {
	if o == nil || utils.IsNil(o.QrCode.Get()) {
		var ret MutableQRCode
		return ret
	}
	return *o.QrCode.Get()
}

// GetQrCodeOk returns a tuple with the QrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethod) GetQrCodeOk() (*MutableQRCode, bool) {
	if o == nil {
		return nil, false
	}
	return o.QrCode.Get(), o.QrCode.IsSet()
}

// HasQrCode returns a boolean if a field has been set.
func (o *PaymentMethod) HasQrCode() bool {
	if o != nil && o.QrCode.IsSet() {
		return true
	}

	return false
}

// SetQrCode gets a reference to the given NullableMutableQRCode and assigns it to the QrCode field.
func (o *PaymentMethod) SetQrCode(v MutableQRCode) {
	o.QrCode.Set(&v)
}
// SetQrCodeNil sets the value for QrCode to be an explicit nil
func (o *PaymentMethod) SetQrCodeNil() {
	o.QrCode.Set(nil)
}

// UnsetQrCode ensures that no value is present for QrCode, not even an explicit nil
func (o *PaymentMethod) UnsetQrCode() {
	o.QrCode.Unset()
}

func (o PaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["reusability"] = o.Reusability
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !utils.IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if o.Card.IsSet() {
		toSerialize["card"] = o.Card.Get()
	}
	if o.Cryptocurrency.IsSet() {
		toSerialize["cryptocurrency"] = o.Cryptocurrency.Get()
	}
	if o.DirectBankTransfer.IsSet() {
		toSerialize["direct_bank_transfer"] = o.DirectBankTransfer.Get()
	}
	if o.DirectDebit.IsSet() {
		toSerialize["direct_debit"] = o.DirectDebit.Get()
	}
	if o.Ewallet.IsSet() {
		toSerialize["ewallet"] = o.Ewallet.Get()
	}
	if o.OverTheCounter.IsSet() {
		toSerialize["over_the_counter"] = o.OverTheCounter.Get()
	}
	if o.VirtualAccount.IsSet() {
		toSerialize["virtual_account"] = o.VirtualAccount.Get()
	}
	if o.QrCode.IsSet() {
		toSerialize["qr_code"] = o.QrCode.Get()
	}
	return toSerialize, nil
}

type NullablePaymentMethod struct {
	value *PaymentMethod
	isSet bool
}

func (v NullablePaymentMethod) Get() *PaymentMethod {
	return v.value
}

func (v *NullablePaymentMethod) Set(val *PaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethod(val *PaymentMethod) *NullablePaymentMethod {
	return &NullablePaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


