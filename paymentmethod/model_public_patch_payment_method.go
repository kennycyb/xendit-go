/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PublicPatchPaymentMethod type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PublicPatchPaymentMethod{}

// PublicPatchPaymentMethod struct for PublicPatchPaymentMethod
type PublicPatchPaymentMethod struct {
	Description *string `json:"description,omitempty"`
	ReferenceId *string `json:"reference_id,omitempty"`
	Reusability *PaymentMethodReusability `json:"reusability,omitempty"`
	Status *PaymentMethodStatus `json:"status,omitempty"`
	OverTheCounter *PatchOverTheCounter `json:"over_the_counter,omitempty"`
	VirtualAccount *PatchVirtualAccount `json:"virtual_account,omitempty"`
}

// NewPublicPatchPaymentMethod instantiates a new PublicPatchPaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPatchPaymentMethod() *PublicPatchPaymentMethod {
	this := PublicPatchPaymentMethod{}
	return &this
}

// NewPublicPatchPaymentMethodWithDefaults instantiates a new PublicPatchPaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPatchPaymentMethodWithDefaults() *PublicPatchPaymentMethod {
	this := PublicPatchPaymentMethod{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PublicPatchPaymentMethod) SetDescription(v string) {
	o.Description = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetReferenceId() string {
	if o == nil || utils.IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetReferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasReferenceId() bool {
	if o != nil && !utils.IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *PublicPatchPaymentMethod) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetReusability returns the Reusability field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetReusability() PaymentMethodReusability {
	if o == nil || utils.IsNil(o.Reusability) {
		var ret PaymentMethodReusability
		return ret
	}
	return *o.Reusability
}

// GetReusabilityOk returns a tuple with the Reusability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetReusabilityOk() (*PaymentMethodReusability, bool) {
	if o == nil || utils.IsNil(o.Reusability) {
		return nil, false
	}
	return o.Reusability, true
}

// HasReusability returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasReusability() bool {
	if o != nil && !utils.IsNil(o.Reusability) {
		return true
	}

	return false
}

// SetReusability gets a reference to the given PaymentMethodReusability and assigns it to the Reusability field.
func (o *PublicPatchPaymentMethod) SetReusability(v PaymentMethodReusability) {
	o.Reusability = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetStatus() PaymentMethodStatus {
	if o == nil || utils.IsNil(o.Status) {
		var ret PaymentMethodStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetStatusOk() (*PaymentMethodStatus, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PaymentMethodStatus and assigns it to the Status field.
func (o *PublicPatchPaymentMethod) SetStatus(v PaymentMethodStatus) {
	o.Status = &v
}

// GetOverTheCounter returns the OverTheCounter field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetOverTheCounter() PatchOverTheCounter {
	if o == nil || utils.IsNil(o.OverTheCounter) {
		var ret PatchOverTheCounter
		return ret
	}
	return *o.OverTheCounter
}

// GetOverTheCounterOk returns a tuple with the OverTheCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetOverTheCounterOk() (*PatchOverTheCounter, bool) {
	if o == nil || utils.IsNil(o.OverTheCounter) {
		return nil, false
	}
	return o.OverTheCounter, true
}

// HasOverTheCounter returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasOverTheCounter() bool {
	if o != nil && !utils.IsNil(o.OverTheCounter) {
		return true
	}

	return false
}

// SetOverTheCounter gets a reference to the given PatchOverTheCounter and assigns it to the OverTheCounter field.
func (o *PublicPatchPaymentMethod) SetOverTheCounter(v PatchOverTheCounter) {
	o.OverTheCounter = &v
}

// GetVirtualAccount returns the VirtualAccount field value if set, zero value otherwise.
func (o *PublicPatchPaymentMethod) GetVirtualAccount() PatchVirtualAccount {
	if o == nil || utils.IsNil(o.VirtualAccount) {
		var ret PatchVirtualAccount
		return ret
	}
	return *o.VirtualAccount
}

// GetVirtualAccountOk returns a tuple with the VirtualAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPatchPaymentMethod) GetVirtualAccountOk() (*PatchVirtualAccount, bool) {
	if o == nil || utils.IsNil(o.VirtualAccount) {
		return nil, false
	}
	return o.VirtualAccount, true
}

// HasVirtualAccount returns a boolean if a field has been set.
func (o *PublicPatchPaymentMethod) HasVirtualAccount() bool {
	if o != nil && !utils.IsNil(o.VirtualAccount) {
		return true
	}

	return false
}

// SetVirtualAccount gets a reference to the given PatchVirtualAccount and assigns it to the VirtualAccount field.
func (o *PublicPatchPaymentMethod) SetVirtualAccount(v PatchVirtualAccount) {
	o.VirtualAccount = &v
}

func (o PublicPatchPaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPatchPaymentMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !utils.IsNil(o.Reusability) {
		toSerialize["reusability"] = o.Reusability
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !utils.IsNil(o.OverTheCounter) {
		toSerialize["over_the_counter"] = o.OverTheCounter
	}
	if !utils.IsNil(o.VirtualAccount) {
		toSerialize["virtual_account"] = o.VirtualAccount
	}
	return toSerialize, nil
}

type NullablePublicPatchPaymentMethod struct {
	value *PublicPatchPaymentMethod
	isSet bool
}

func (v NullablePublicPatchPaymentMethod) Get() *PublicPatchPaymentMethod {
	return v.value
}

func (v *NullablePublicPatchPaymentMethod) Set(val *PublicPatchPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPatchPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPatchPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPatchPaymentMethod(val *PublicPatchPaymentMethod) *NullablePublicPatchPaymentMethod {
	return &NullablePublicPatchPaymentMethod{value: val, isSet: true}
}

func (v NullablePublicPatchPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPatchPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


