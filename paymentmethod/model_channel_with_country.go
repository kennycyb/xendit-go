/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the ChannelWithCountry type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ChannelWithCountry{}

// ChannelWithCountry Channel code with country
type ChannelWithCountry struct {
	ChannelCode NullableString `json:"channel_code,omitempty"`
	Country *PaymentMethodCountry `json:"country,omitempty"`
}

// NewChannelWithCountry instantiates a new ChannelWithCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelWithCountry() *ChannelWithCountry {
	this := ChannelWithCountry{}
	return &this
}

// NewChannelWithCountryWithDefaults instantiates a new ChannelWithCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelWithCountryWithDefaults() *ChannelWithCountry {
	this := ChannelWithCountry{}
	return &this
}

// GetChannelCode returns the ChannelCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelWithCountry) GetChannelCode() string {
	if o == nil || utils.IsNil(o.ChannelCode.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelCode.Get()
}

// GetChannelCodeOk returns a tuple with the ChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelWithCountry) GetChannelCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelCode.Get(), o.ChannelCode.IsSet()
}

// HasChannelCode returns a boolean if a field has been set.
func (o *ChannelWithCountry) HasChannelCode() bool {
	if o != nil && o.ChannelCode.IsSet() {
		return true
	}

	return false
}

// SetChannelCode gets a reference to the given NullableString and assigns it to the ChannelCode field.
func (o *ChannelWithCountry) SetChannelCode(v string) {
	o.ChannelCode.Set(&v)
}
// SetChannelCodeNil sets the value for ChannelCode to be an explicit nil
func (o *ChannelWithCountry) SetChannelCodeNil() {
	o.ChannelCode.Set(nil)
}

// UnsetChannelCode ensures that no value is present for ChannelCode, not even an explicit nil
func (o *ChannelWithCountry) UnsetChannelCode() {
	o.ChannelCode.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ChannelWithCountry) GetCountry() PaymentMethodCountry {
	if o == nil || utils.IsNil(o.Country) {
		var ret PaymentMethodCountry
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelWithCountry) GetCountryOk() (*PaymentMethodCountry, bool) {
	if o == nil || utils.IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ChannelWithCountry) HasCountry() bool {
	if o != nil && !utils.IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given PaymentMethodCountry and assigns it to the Country field.
func (o *ChannelWithCountry) SetCountry(v PaymentMethodCountry) {
	o.Country = &v
}

func (o ChannelWithCountry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelWithCountry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChannelCode.IsSet() {
		toSerialize["channel_code"] = o.ChannelCode.Get()
	}
	if !utils.IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullableChannelWithCountry struct {
	value *ChannelWithCountry
	isSet bool
}

func (v NullableChannelWithCountry) Get() *ChannelWithCountry {
	return v.value
}

func (v *NullableChannelWithCountry) Set(val *ChannelWithCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelWithCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelWithCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelWithCountry(val *ChannelWithCountry) *NullableChannelWithCountry {
	return &NullableChannelWithCountry{value: val, isSet: true}
}

func (v NullableChannelWithCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelWithCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


