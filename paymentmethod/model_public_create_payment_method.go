/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PublicCreatePaymentMethod type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PublicCreatePaymentMethod{}

// PublicCreatePaymentMethod struct for PublicCreatePaymentMethod
type PublicCreatePaymentMethod struct {
	Type PaymentMethodType `json:"type"`
	Country NullableOptionalPaymentMethodCountry `json:"country,omitempty"`
	Reusability PaymentMethodReusability `json:"reusability"`
	CustomerId NullableString `json:"customer_id,omitempty"`
	ReferenceId *string `json:"reference_id,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Cryptocurrency *MutableCrypto `json:"cryptocurrency,omitempty"`
	DirectBankTransfer *MutableDirectBankTransfer `json:"direct_bank_transfer,omitempty"`
	DirectDebit *MutableDirectDebit `json:"direct_debit,omitempty"`
	Ewallet *MutableEwallet `json:"ewallet,omitempty"`
	OverTheCounter *MutableOverTheCounter `json:"over_the_counter,omitempty"`
	VirtualAccount *MutableVirtualAccount `json:"virtual_account,omitempty"`
	QrCode *MutableQRCode `json:"qr_code,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	BillingInformation NullableBillingInformation `json:"billing_information,omitempty"`
}

// NewPublicCreatePaymentMethod instantiates a new PublicCreatePaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCreatePaymentMethod(type_ PaymentMethodType, reusability PaymentMethodReusability) *PublicCreatePaymentMethod {
	this := PublicCreatePaymentMethod{}
	this.Type = type_
	this.Reusability = reusability
	return &this
}

// NewPublicCreatePaymentMethodWithDefaults instantiates a new PublicCreatePaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCreatePaymentMethodWithDefaults() *PublicCreatePaymentMethod {
	this := PublicCreatePaymentMethod{}
	return &this
}

// GetType returns the Type field value
func (o *PublicCreatePaymentMethod) GetType() PaymentMethodType {
	if o == nil {
		var ret PaymentMethodType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetTypeOk() (*PaymentMethodType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicCreatePaymentMethod) SetType(v PaymentMethodType) {
	o.Type = v
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicCreatePaymentMethod) GetCountry() OptionalPaymentMethodCountry {
	if o == nil || utils.IsNil(o.Country.Get()) {
		var ret OptionalPaymentMethodCountry
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicCreatePaymentMethod) GetCountryOk() (*OptionalPaymentMethodCountry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableOptionalPaymentMethodCountry and assigns it to the Country field.
func (o *PublicCreatePaymentMethod) SetCountry(v OptionalPaymentMethodCountry) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *PublicCreatePaymentMethod) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *PublicCreatePaymentMethod) UnsetCountry() {
	o.Country.Unset()
}

// GetReusability returns the Reusability field value
func (o *PublicCreatePaymentMethod) GetReusability() PaymentMethodReusability {
	if o == nil {
		var ret PaymentMethodReusability
		return ret
	}

	return o.Reusability
}

// GetReusabilityOk returns a tuple with the Reusability field value
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetReusabilityOk() (*PaymentMethodReusability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reusability, true
}

// SetReusability sets field value
func (o *PublicCreatePaymentMethod) SetReusability(v PaymentMethodReusability) {
	o.Reusability = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicCreatePaymentMethod) GetCustomerId() string {
	if o == nil || utils.IsNil(o.CustomerId.Get()) {
		var ret string
		return ret
	}
	return *o.CustomerId.Get()
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicCreatePaymentMethod) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerId.Get(), o.CustomerId.IsSet()
}

// HasCustomerId returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasCustomerId() bool {
	if o != nil && o.CustomerId.IsSet() {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given NullableString and assigns it to the CustomerId field.
func (o *PublicCreatePaymentMethod) SetCustomerId(v string) {
	o.CustomerId.Set(&v)
}
// SetCustomerIdNil sets the value for CustomerId to be an explicit nil
func (o *PublicCreatePaymentMethod) SetCustomerIdNil() {
	o.CustomerId.Set(nil)
}

// UnsetCustomerId ensures that no value is present for CustomerId, not even an explicit nil
func (o *PublicCreatePaymentMethod) UnsetCustomerId() {
	o.CustomerId.Unset()
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetReferenceId() string {
	if o == nil || utils.IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetReferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasReferenceId() bool {
	if o != nil && !utils.IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *PublicCreatePaymentMethod) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicCreatePaymentMethod) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicCreatePaymentMethod) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PublicCreatePaymentMethod) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PublicCreatePaymentMethod) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PublicCreatePaymentMethod) UnsetDescription() {
	o.Description.Unset()
}

// GetCryptocurrency returns the Cryptocurrency field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetCryptocurrency() MutableCrypto {
	if o == nil || utils.IsNil(o.Cryptocurrency) {
		var ret MutableCrypto
		return ret
	}
	return *o.Cryptocurrency
}

// GetCryptocurrencyOk returns a tuple with the Cryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetCryptocurrencyOk() (*MutableCrypto, bool) {
	if o == nil || utils.IsNil(o.Cryptocurrency) {
		return nil, false
	}
	return o.Cryptocurrency, true
}

// HasCryptocurrency returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasCryptocurrency() bool {
	if o != nil && !utils.IsNil(o.Cryptocurrency) {
		return true
	}

	return false
}

// SetCryptocurrency gets a reference to the given MutableCrypto and assigns it to the Cryptocurrency field.
func (o *PublicCreatePaymentMethod) SetCryptocurrency(v MutableCrypto) {
	o.Cryptocurrency = &v
}

// GetDirectBankTransfer returns the DirectBankTransfer field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetDirectBankTransfer() MutableDirectBankTransfer {
	if o == nil || utils.IsNil(o.DirectBankTransfer) {
		var ret MutableDirectBankTransfer
		return ret
	}
	return *o.DirectBankTransfer
}

// GetDirectBankTransferOk returns a tuple with the DirectBankTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetDirectBankTransferOk() (*MutableDirectBankTransfer, bool) {
	if o == nil || utils.IsNil(o.DirectBankTransfer) {
		return nil, false
	}
	return o.DirectBankTransfer, true
}

// HasDirectBankTransfer returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasDirectBankTransfer() bool {
	if o != nil && !utils.IsNil(o.DirectBankTransfer) {
		return true
	}

	return false
}

// SetDirectBankTransfer gets a reference to the given MutableDirectBankTransfer and assigns it to the DirectBankTransfer field.
func (o *PublicCreatePaymentMethod) SetDirectBankTransfer(v MutableDirectBankTransfer) {
	o.DirectBankTransfer = &v
}

// GetDirectDebit returns the DirectDebit field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetDirectDebit() MutableDirectDebit {
	if o == nil || utils.IsNil(o.DirectDebit) {
		var ret MutableDirectDebit
		return ret
	}
	return *o.DirectDebit
}

// GetDirectDebitOk returns a tuple with the DirectDebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetDirectDebitOk() (*MutableDirectDebit, bool) {
	if o == nil || utils.IsNil(o.DirectDebit) {
		return nil, false
	}
	return o.DirectDebit, true
}

// HasDirectDebit returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasDirectDebit() bool {
	if o != nil && !utils.IsNil(o.DirectDebit) {
		return true
	}

	return false
}

// SetDirectDebit gets a reference to the given MutableDirectDebit and assigns it to the DirectDebit field.
func (o *PublicCreatePaymentMethod) SetDirectDebit(v MutableDirectDebit) {
	o.DirectDebit = &v
}

// GetEwallet returns the Ewallet field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetEwallet() MutableEwallet {
	if o == nil || utils.IsNil(o.Ewallet) {
		var ret MutableEwallet
		return ret
	}
	return *o.Ewallet
}

// GetEwalletOk returns a tuple with the Ewallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetEwalletOk() (*MutableEwallet, bool) {
	if o == nil || utils.IsNil(o.Ewallet) {
		return nil, false
	}
	return o.Ewallet, true
}

// HasEwallet returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasEwallet() bool {
	if o != nil && !utils.IsNil(o.Ewallet) {
		return true
	}

	return false
}

// SetEwallet gets a reference to the given MutableEwallet and assigns it to the Ewallet field.
func (o *PublicCreatePaymentMethod) SetEwallet(v MutableEwallet) {
	o.Ewallet = &v
}

// GetOverTheCounter returns the OverTheCounter field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetOverTheCounter() MutableOverTheCounter {
	if o == nil || utils.IsNil(o.OverTheCounter) {
		var ret MutableOverTheCounter
		return ret
	}
	return *o.OverTheCounter
}

// GetOverTheCounterOk returns a tuple with the OverTheCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetOverTheCounterOk() (*MutableOverTheCounter, bool) {
	if o == nil || utils.IsNil(o.OverTheCounter) {
		return nil, false
	}
	return o.OverTheCounter, true
}

// HasOverTheCounter returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasOverTheCounter() bool {
	if o != nil && !utils.IsNil(o.OverTheCounter) {
		return true
	}

	return false
}

// SetOverTheCounter gets a reference to the given MutableOverTheCounter and assigns it to the OverTheCounter field.
func (o *PublicCreatePaymentMethod) SetOverTheCounter(v MutableOverTheCounter) {
	o.OverTheCounter = &v
}

// GetVirtualAccount returns the VirtualAccount field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetVirtualAccount() MutableVirtualAccount {
	if o == nil || utils.IsNil(o.VirtualAccount) {
		var ret MutableVirtualAccount
		return ret
	}
	return *o.VirtualAccount
}

// GetVirtualAccountOk returns a tuple with the VirtualAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetVirtualAccountOk() (*MutableVirtualAccount, bool) {
	if o == nil || utils.IsNil(o.VirtualAccount) {
		return nil, false
	}
	return o.VirtualAccount, true
}

// HasVirtualAccount returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasVirtualAccount() bool {
	if o != nil && !utils.IsNil(o.VirtualAccount) {
		return true
	}

	return false
}

// SetVirtualAccount gets a reference to the given MutableVirtualAccount and assigns it to the VirtualAccount field.
func (o *PublicCreatePaymentMethod) SetVirtualAccount(v MutableVirtualAccount) {
	o.VirtualAccount = &v
}

// GetQrCode returns the QrCode field value if set, zero value otherwise.
func (o *PublicCreatePaymentMethod) GetQrCode() MutableQRCode {
	if o == nil || utils.IsNil(o.QrCode) {
		var ret MutableQRCode
		return ret
	}
	return *o.QrCode
}

// GetQrCodeOk returns a tuple with the QrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCreatePaymentMethod) GetQrCodeOk() (*MutableQRCode, bool) {
	if o == nil || utils.IsNil(o.QrCode) {
		return nil, false
	}
	return o.QrCode, true
}

// HasQrCode returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasQrCode() bool {
	if o != nil && !utils.IsNil(o.QrCode) {
		return true
	}

	return false
}

// SetQrCode gets a reference to the given MutableQRCode and assigns it to the QrCode field.
func (o *PublicCreatePaymentMethod) SetQrCode(v MutableQRCode) {
	o.QrCode = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicCreatePaymentMethod) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicCreatePaymentMethod) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasMetadata() bool {
	if o != nil && utils.IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *PublicCreatePaymentMethod) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetBillingInformation returns the BillingInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicCreatePaymentMethod) GetBillingInformation() BillingInformation {
	if o == nil || utils.IsNil(o.BillingInformation.Get()) {
		var ret BillingInformation
		return ret
	}
	return *o.BillingInformation.Get()
}

// GetBillingInformationOk returns a tuple with the BillingInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicCreatePaymentMethod) GetBillingInformationOk() (*BillingInformation, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingInformation.Get(), o.BillingInformation.IsSet()
}

// HasBillingInformation returns a boolean if a field has been set.
func (o *PublicCreatePaymentMethod) HasBillingInformation() bool {
	if o != nil && o.BillingInformation.IsSet() {
		return true
	}

	return false
}

// SetBillingInformation gets a reference to the given NullableBillingInformation and assigns it to the BillingInformation field.
func (o *PublicCreatePaymentMethod) SetBillingInformation(v BillingInformation) {
	o.BillingInformation.Set(&v)
}
// SetBillingInformationNil sets the value for BillingInformation to be an explicit nil
func (o *PublicCreatePaymentMethod) SetBillingInformationNil() {
	o.BillingInformation.Set(nil)
}

// UnsetBillingInformation ensures that no value is present for BillingInformation, not even an explicit nil
func (o *PublicCreatePaymentMethod) UnsetBillingInformation() {
	o.BillingInformation.Unset()
}

func (o PublicCreatePaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCreatePaymentMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	toSerialize["reusability"] = o.Reusability
	if o.CustomerId.IsSet() {
		toSerialize["customer_id"] = o.CustomerId.Get()
	}
	if !utils.IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !utils.IsNil(o.Cryptocurrency) {
		toSerialize["cryptocurrency"] = o.Cryptocurrency
	}
	if !utils.IsNil(o.DirectBankTransfer) {
		toSerialize["direct_bank_transfer"] = o.DirectBankTransfer
	}
	if !utils.IsNil(o.DirectDebit) {
		toSerialize["direct_debit"] = o.DirectDebit
	}
	if !utils.IsNil(o.Ewallet) {
		toSerialize["ewallet"] = o.Ewallet
	}
	if !utils.IsNil(o.OverTheCounter) {
		toSerialize["over_the_counter"] = o.OverTheCounter
	}
	if !utils.IsNil(o.VirtualAccount) {
		toSerialize["virtual_account"] = o.VirtualAccount
	}
	if !utils.IsNil(o.QrCode) {
		toSerialize["qr_code"] = o.QrCode
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.BillingInformation.IsSet() {
		toSerialize["billing_information"] = o.BillingInformation.Get()
	}
	return toSerialize, nil
}

type NullablePublicCreatePaymentMethod struct {
	value *PublicCreatePaymentMethod
	isSet bool
}

func (v NullablePublicCreatePaymentMethod) Get() *PublicCreatePaymentMethod {
	return v.value
}

func (v *NullablePublicCreatePaymentMethod) Set(val *PublicCreatePaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCreatePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCreatePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCreatePaymentMethod(val *PublicCreatePaymentMethod) *NullablePublicCreatePaymentMethod {
	return &NullablePublicCreatePaymentMethod{value: val, isSet: true}
}

func (v NullablePublicCreatePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCreatePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


