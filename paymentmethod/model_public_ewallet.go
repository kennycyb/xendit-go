/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PublicEwallet type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PublicEwallet{}

// PublicEwallet Ewallet Payment Method Details
type PublicEwallet struct {
	ChannelCode EwalletChannelCode `json:"channel_code"`
	ChannelProperties *EwalletChannelProperties `json:"channel_properties,omitempty"`
	Account *EwalletAccount `json:"account,omitempty"`
}

// NewPublicEwallet instantiates a new PublicEwallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicEwallet(channelCode EwalletChannelCode) *PublicEwallet {
	this := PublicEwallet{}
	this.ChannelCode = channelCode
	return &this
}

// NewPublicEwalletWithDefaults instantiates a new PublicEwallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicEwalletWithDefaults() *PublicEwallet {
	this := PublicEwallet{}
	return &this
}

// GetChannelCode returns the ChannelCode field value
func (o *PublicEwallet) GetChannelCode() EwalletChannelCode {
	if o == nil {
		var ret EwalletChannelCode
		return ret
	}

	return o.ChannelCode
}

// GetChannelCodeOk returns a tuple with the ChannelCode field value
// and a boolean to check if the value has been set.
func (o *PublicEwallet) GetChannelCodeOk() (*EwalletChannelCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelCode, true
}

// SetChannelCode sets field value
func (o *PublicEwallet) SetChannelCode(v EwalletChannelCode) {
	o.ChannelCode = v
}

// GetChannelProperties returns the ChannelProperties field value if set, zero value otherwise.
func (o *PublicEwallet) GetChannelProperties() EwalletChannelProperties {
	if o == nil || utils.IsNil(o.ChannelProperties) {
		var ret EwalletChannelProperties
		return ret
	}
	return *o.ChannelProperties
}

// GetChannelPropertiesOk returns a tuple with the ChannelProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEwallet) GetChannelPropertiesOk() (*EwalletChannelProperties, bool) {
	if o == nil || utils.IsNil(o.ChannelProperties) {
		return nil, false
	}
	return o.ChannelProperties, true
}

// HasChannelProperties returns a boolean if a field has been set.
func (o *PublicEwallet) HasChannelProperties() bool {
	if o != nil && !utils.IsNil(o.ChannelProperties) {
		return true
	}

	return false
}

// SetChannelProperties gets a reference to the given EwalletChannelProperties and assigns it to the ChannelProperties field.
func (o *PublicEwallet) SetChannelProperties(v EwalletChannelProperties) {
	o.ChannelProperties = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *PublicEwallet) GetAccount() EwalletAccount {
	if o == nil || utils.IsNil(o.Account) {
		var ret EwalletAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicEwallet) GetAccountOk() (*EwalletAccount, bool) {
	if o == nil || utils.IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *PublicEwallet) HasAccount() bool {
	if o != nil && !utils.IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given EwalletAccount and assigns it to the Account field.
func (o *PublicEwallet) SetAccount(v EwalletAccount) {
	o.Account = &v
}

func (o PublicEwallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicEwallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channel_code"] = o.ChannelCode
	if !utils.IsNil(o.ChannelProperties) {
		toSerialize["channel_properties"] = o.ChannelProperties
	}
	if !utils.IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	return toSerialize, nil
}

type NullablePublicEwallet struct {
	value *PublicEwallet
	isSet bool
}

func (v NullablePublicEwallet) Get() *PublicEwallet {
	return v.value
}

func (v *NullablePublicEwallet) Set(val *PublicEwallet) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicEwallet) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicEwallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicEwallet(val *PublicEwallet) *NullablePublicEwallet {
	return &NullablePublicEwallet{value: val, isSet: true}
}

func (v NullablePublicEwallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicEwallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


