/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PublicPaymentMethodAllOf type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PublicPaymentMethodAllOf{}

// PublicPaymentMethodAllOf struct for PublicPaymentMethodAllOf
type PublicPaymentMethodAllOf struct {
	Ewallet NullablePublicEwallet `json:"ewallet,omitempty"`
	DirectDebit NullablePublicDirectDebit `json:"direct_debit,omitempty"`
	OverTheCounter NullablePublicOverTheCounter `json:"over_the_counter,omitempty"`
	Card NullablePublicCard `json:"card,omitempty"`
	Cryptocurrency NullablePublicCrypto `json:"cryptocurrency,omitempty"`
	QrCode NullablePublicQRCode `json:"qr_code,omitempty"`
}

// NewPublicPaymentMethodAllOf instantiates a new PublicPaymentMethodAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPaymentMethodAllOf() *PublicPaymentMethodAllOf {
	this := PublicPaymentMethodAllOf{}
	return &this
}

// NewPublicPaymentMethodAllOfWithDefaults instantiates a new PublicPaymentMethodAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPaymentMethodAllOfWithDefaults() *PublicPaymentMethodAllOf {
	this := PublicPaymentMethodAllOf{}
	return &this
}

// GetEwallet returns the Ewallet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetEwallet() PublicEwallet {
	if o == nil || utils.IsNil(o.Ewallet.Get()) {
		var ret PublicEwallet
		return ret
	}
	return *o.Ewallet.Get()
}

// GetEwalletOk returns a tuple with the Ewallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetEwalletOk() (*PublicEwallet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ewallet.Get(), o.Ewallet.IsSet()
}

// HasEwallet returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasEwallet() bool {
	if o != nil && o.Ewallet.IsSet() {
		return true
	}

	return false
}

// SetEwallet gets a reference to the given NullablePublicEwallet and assigns it to the Ewallet field.
func (o *PublicPaymentMethodAllOf) SetEwallet(v PublicEwallet) {
	o.Ewallet.Set(&v)
}
// SetEwalletNil sets the value for Ewallet to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetEwalletNil() {
	o.Ewallet.Set(nil)
}

// UnsetEwallet ensures that no value is present for Ewallet, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetEwallet() {
	o.Ewallet.Unset()
}

// GetDirectDebit returns the DirectDebit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetDirectDebit() PublicDirectDebit {
	if o == nil || utils.IsNil(o.DirectDebit.Get()) {
		var ret PublicDirectDebit
		return ret
	}
	return *o.DirectDebit.Get()
}

// GetDirectDebitOk returns a tuple with the DirectDebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetDirectDebitOk() (*PublicDirectDebit, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectDebit.Get(), o.DirectDebit.IsSet()
}

// HasDirectDebit returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasDirectDebit() bool {
	if o != nil && o.DirectDebit.IsSet() {
		return true
	}

	return false
}

// SetDirectDebit gets a reference to the given NullablePublicDirectDebit and assigns it to the DirectDebit field.
func (o *PublicPaymentMethodAllOf) SetDirectDebit(v PublicDirectDebit) {
	o.DirectDebit.Set(&v)
}
// SetDirectDebitNil sets the value for DirectDebit to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetDirectDebitNil() {
	o.DirectDebit.Set(nil)
}

// UnsetDirectDebit ensures that no value is present for DirectDebit, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetDirectDebit() {
	o.DirectDebit.Unset()
}

// GetOverTheCounter returns the OverTheCounter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetOverTheCounter() PublicOverTheCounter {
	if o == nil || utils.IsNil(o.OverTheCounter.Get()) {
		var ret PublicOverTheCounter
		return ret
	}
	return *o.OverTheCounter.Get()
}

// GetOverTheCounterOk returns a tuple with the OverTheCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetOverTheCounterOk() (*PublicOverTheCounter, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverTheCounter.Get(), o.OverTheCounter.IsSet()
}

// HasOverTheCounter returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasOverTheCounter() bool {
	if o != nil && o.OverTheCounter.IsSet() {
		return true
	}

	return false
}

// SetOverTheCounter gets a reference to the given NullablePublicOverTheCounter and assigns it to the OverTheCounter field.
func (o *PublicPaymentMethodAllOf) SetOverTheCounter(v PublicOverTheCounter) {
	o.OverTheCounter.Set(&v)
}
// SetOverTheCounterNil sets the value for OverTheCounter to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetOverTheCounterNil() {
	o.OverTheCounter.Set(nil)
}

// UnsetOverTheCounter ensures that no value is present for OverTheCounter, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetOverTheCounter() {
	o.OverTheCounter.Unset()
}

// GetCard returns the Card field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetCard() PublicCard {
	if o == nil || utils.IsNil(o.Card.Get()) {
		var ret PublicCard
		return ret
	}
	return *o.Card.Get()
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetCardOk() (*PublicCard, bool) {
	if o == nil {
		return nil, false
	}
	return o.Card.Get(), o.Card.IsSet()
}

// HasCard returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasCard() bool {
	if o != nil && o.Card.IsSet() {
		return true
	}

	return false
}

// SetCard gets a reference to the given NullablePublicCard and assigns it to the Card field.
func (o *PublicPaymentMethodAllOf) SetCard(v PublicCard) {
	o.Card.Set(&v)
}
// SetCardNil sets the value for Card to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetCardNil() {
	o.Card.Set(nil)
}

// UnsetCard ensures that no value is present for Card, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetCard() {
	o.Card.Unset()
}

// GetCryptocurrency returns the Cryptocurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetCryptocurrency() PublicCrypto {
	if o == nil || utils.IsNil(o.Cryptocurrency.Get()) {
		var ret PublicCrypto
		return ret
	}
	return *o.Cryptocurrency.Get()
}

// GetCryptocurrencyOk returns a tuple with the Cryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetCryptocurrencyOk() (*PublicCrypto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cryptocurrency.Get(), o.Cryptocurrency.IsSet()
}

// HasCryptocurrency returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasCryptocurrency() bool {
	if o != nil && o.Cryptocurrency.IsSet() {
		return true
	}

	return false
}

// SetCryptocurrency gets a reference to the given NullablePublicCrypto and assigns it to the Cryptocurrency field.
func (o *PublicPaymentMethodAllOf) SetCryptocurrency(v PublicCrypto) {
	o.Cryptocurrency.Set(&v)
}
// SetCryptocurrencyNil sets the value for Cryptocurrency to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetCryptocurrencyNil() {
	o.Cryptocurrency.Set(nil)
}

// UnsetCryptocurrency ensures that no value is present for Cryptocurrency, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetCryptocurrency() {
	o.Cryptocurrency.Unset()
}

// GetQrCode returns the QrCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicPaymentMethodAllOf) GetQrCode() PublicQRCode {
	if o == nil || utils.IsNil(o.QrCode.Get()) {
		var ret PublicQRCode
		return ret
	}
	return *o.QrCode.Get()
}

// GetQrCodeOk returns a tuple with the QrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicPaymentMethodAllOf) GetQrCodeOk() (*PublicQRCode, bool) {
	if o == nil {
		return nil, false
	}
	return o.QrCode.Get(), o.QrCode.IsSet()
}

// HasQrCode returns a boolean if a field has been set.
func (o *PublicPaymentMethodAllOf) HasQrCode() bool {
	if o != nil && o.QrCode.IsSet() {
		return true
	}

	return false
}

// SetQrCode gets a reference to the given NullablePublicQRCode and assigns it to the QrCode field.
func (o *PublicPaymentMethodAllOf) SetQrCode(v PublicQRCode) {
	o.QrCode.Set(&v)
}
// SetQrCodeNil sets the value for QrCode to be an explicit nil
func (o *PublicPaymentMethodAllOf) SetQrCodeNil() {
	o.QrCode.Set(nil)
}

// UnsetQrCode ensures that no value is present for QrCode, not even an explicit nil
func (o *PublicPaymentMethodAllOf) UnsetQrCode() {
	o.QrCode.Unset()
}

func (o PublicPaymentMethodAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPaymentMethodAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ewallet.IsSet() {
		toSerialize["ewallet"] = o.Ewallet.Get()
	}
	if o.DirectDebit.IsSet() {
		toSerialize["direct_debit"] = o.DirectDebit.Get()
	}
	if o.OverTheCounter.IsSet() {
		toSerialize["over_the_counter"] = o.OverTheCounter.Get()
	}
	if o.Card.IsSet() {
		toSerialize["card"] = o.Card.Get()
	}
	if o.Cryptocurrency.IsSet() {
		toSerialize["cryptocurrency"] = o.Cryptocurrency.Get()
	}
	if o.QrCode.IsSet() {
		toSerialize["qr_code"] = o.QrCode.Get()
	}
	return toSerialize, nil
}

type NullablePublicPaymentMethodAllOf struct {
	value *PublicPaymentMethodAllOf
	isSet bool
}

func (v NullablePublicPaymentMethodAllOf) Get() *PublicPaymentMethodAllOf {
	return v.value
}

func (v *NullablePublicPaymentMethodAllOf) Set(val *PublicPaymentMethodAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPaymentMethodAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPaymentMethodAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPaymentMethodAllOf(val *PublicPaymentMethodAllOf) *NullablePublicPaymentMethodAllOf {
	return &NullablePublicPaymentMethodAllOf{value: val, isSet: true}
}

func (v NullablePublicPaymentMethodAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPaymentMethodAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


