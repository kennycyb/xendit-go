/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the ChannelResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ChannelResponse{}

// ChannelResponse Channel code with country list and error list
type ChannelResponse struct {
	Channels []ChannelWithCountry `json:"channels,omitempty"`
	Errors []ChannelResponseErrorsInner `json:"errors,omitempty"`
}

// NewChannelResponse instantiates a new ChannelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelResponse() *ChannelResponse {
	this := ChannelResponse{}
	return &this
}

// NewChannelResponseWithDefaults instantiates a new ChannelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelResponseWithDefaults() *ChannelResponse {
	this := ChannelResponse{}
	return &this
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ChannelResponse) GetChannels() []ChannelWithCountry {
	if o == nil || utils.IsNil(o.Channels) {
		var ret []ChannelWithCountry
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelResponse) GetChannelsOk() ([]ChannelWithCountry, bool) {
	if o == nil || utils.IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ChannelResponse) HasChannels() bool {
	if o != nil && !utils.IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []ChannelWithCountry and assigns it to the Channels field.
func (o *ChannelResponse) SetChannels(v []ChannelWithCountry) {
	o.Channels = v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelResponse) GetErrors() []ChannelResponseErrorsInner {
	if o == nil {
		var ret []ChannelResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelResponse) GetErrorsOk() ([]ChannelResponseErrorsInner, bool) {
	if o == nil || utils.IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ChannelResponse) HasErrors() bool {
	if o != nil && utils.IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ChannelResponseErrorsInner and assigns it to the Errors field.
func (o *ChannelResponse) SetErrors(v []ChannelResponseErrorsInner) {
	o.Errors = v
}

func (o ChannelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableChannelResponse struct {
	value *ChannelResponse
	isSet bool
}

func (v NullableChannelResponse) Get() *ChannelResponse {
	return v.value
}

func (v *NullableChannelResponse) Set(val *ChannelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelResponse(val *ChannelResponse) *NullableChannelResponse {
	return &NullableChannelResponse{value: val, isSet: true}
}

func (v NullableChannelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


