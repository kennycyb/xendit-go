/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	
	utils "github.com/kennycyb/xendit-go/utils"
	
)

// checks if the PublicPaymentMethodList type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PublicPaymentMethodList{}

// PublicPaymentMethodList struct for PublicPaymentMethodList
type PublicPaymentMethodList struct {
	Data []PublicPaymentMethod `json:"data"`
	HasMore *bool `json:"has_more,omitempty"`
}

// NewPublicPaymentMethodList instantiates a new PublicPaymentMethodList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPaymentMethodList(data []PublicPaymentMethod) *PublicPaymentMethodList {
	this := PublicPaymentMethodList{}
	this.Data = data
	return &this
}

// NewPublicPaymentMethodListWithDefaults instantiates a new PublicPaymentMethodList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPaymentMethodListWithDefaults() *PublicPaymentMethodList {
	this := PublicPaymentMethodList{}
	return &this
}

// GetData returns the Data field value
func (o *PublicPaymentMethodList) GetData() []PublicPaymentMethod {
	if o == nil {
		var ret []PublicPaymentMethod
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PublicPaymentMethodList) GetDataOk() ([]PublicPaymentMethod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PublicPaymentMethodList) SetData(v []PublicPaymentMethod) {
	o.Data = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *PublicPaymentMethodList) GetHasMore() bool {
	if o == nil || utils.IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPaymentMethodList) GetHasMoreOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *PublicPaymentMethodList) HasHasMore() bool {
	if o != nil && !utils.IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *PublicPaymentMethodList) SetHasMore(v bool) {
	o.HasMore = &v
}

func (o PublicPaymentMethodList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPaymentMethodList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !utils.IsNil(o.HasMore) {
		toSerialize["has_more"] = o.HasMore
	}
	return toSerialize, nil
}

type NullablePublicPaymentMethodList struct {
	value *PublicPaymentMethodList
	isSet bool
}

func (v NullablePublicPaymentMethodList) Get() *PublicPaymentMethodList {
	return v.value
}

func (v *NullablePublicPaymentMethodList) Set(val *PublicPaymentMethodList) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPaymentMethodList) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPaymentMethodList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPaymentMethodList(val *PublicPaymentMethodList) *NullablePublicPaymentMethodList {
	return &NullablePublicPaymentMethodList{value: val, isSet: true}
}

func (v NullablePublicPaymentMethodList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPaymentMethodList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


