/*
Payment Method Service v2

This API is used for Payment Method Service v2

API version: 2.79.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package paymentmethod

import (
	"encoding/json"
	
	"fmt"
)

// OptionalPaymentMethodCountry the model 'OptionalPaymentMethodCountry'
type OptionalPaymentMethodCountry string

// List of OptionalPaymentMethodCountry
const (
	OPTIONALPAYMENTMETHODCOUNTRY_PH OptionalPaymentMethodCountry = "PH"
	OPTIONALPAYMENTMETHODCOUNTRY_ID OptionalPaymentMethodCountry = "ID"
	OPTIONALPAYMENTMETHODCOUNTRY_VN OptionalPaymentMethodCountry = "VN"
	OPTIONALPAYMENTMETHODCOUNTRY_TH OptionalPaymentMethodCountry = "TH"
	OPTIONALPAYMENTMETHODCOUNTRY_MY OptionalPaymentMethodCountry = "MY"
)

// All allowed values of OptionalPaymentMethodCountry enum
var AllowedOptionalPaymentMethodCountryEnumValues = []OptionalPaymentMethodCountry{
	"PH",
	"ID",
	"VN",
	"TH",
	"MY",
}

func (v *OptionalPaymentMethodCountry) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionalPaymentMethodCountry(value)
	for _, existing := range AllowedOptionalPaymentMethodCountryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionalPaymentMethodCountry", value)
}

// NewOptionalPaymentMethodCountryFromValue returns a pointer to a valid OptionalPaymentMethodCountry
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionalPaymentMethodCountryFromValue(v string) (*OptionalPaymentMethodCountry, error) {
	ev := OptionalPaymentMethodCountry(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionalPaymentMethodCountry: valid values are %v", v, AllowedOptionalPaymentMethodCountryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionalPaymentMethodCountry) IsValid() bool {
	for _, existing := range AllowedOptionalPaymentMethodCountryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionalPaymentMethodCountry value
func (v OptionalPaymentMethodCountry) Ptr() *OptionalPaymentMethodCountry {
	return &v
}

type NullableOptionalPaymentMethodCountry struct {
	value *OptionalPaymentMethodCountry
	isSet bool
}

func (v NullableOptionalPaymentMethodCountry) Get() *OptionalPaymentMethodCountry {
	return v.value
}

func (v *NullableOptionalPaymentMethodCountry) Set(val *OptionalPaymentMethodCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionalPaymentMethodCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionalPaymentMethodCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionalPaymentMethodCountry(val *OptionalPaymentMethodCountry) *NullableOptionalPaymentMethodCountry {
	return &NullableOptionalPaymentMethodCountry{value: val, isSet: true}
}

func (v NullableOptionalPaymentMethodCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionalPaymentMethodCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

