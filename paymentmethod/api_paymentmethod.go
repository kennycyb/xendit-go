// Code generated by OpenAPI Generator; DO NOT EDIT.
package paymentmethod

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	
	common "github.com/kennycyb/xendit-go/common"
	utils "github.com/kennycyb/xendit-go/utils"
	"strings"
	"reflect"
	"time"
)


type PaymentmethodApi interface {

	/*
	AuthPaymentMethod Validate a payment method's linking OTP

	This endpoint validates a payment method linking OTP

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiAuthPaymentMethodRequest
	*/
	AuthPaymentMethod(ctx context.Context, paymentMethodId string) ApiAuthPaymentMethodRequest

	// AuthPaymentMethodExecute executes the request
	//  @return PublicPaymentMethod
	AuthPaymentMethodExecute(r ApiAuthPaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error)

	/*
	CreatePaymentMethod Creates payment method

	This endpoint initiates creation of payment method

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePaymentMethodRequest
	*/
	CreatePaymentMethod(ctx context.Context) ApiCreatePaymentMethodRequest

	// CreatePaymentMethodExecute executes the request
	//  @return PublicPaymentMethod
	CreatePaymentMethodExecute(r ApiCreatePaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error)

	/*
	ExpirePaymentMethod Expires a payment method

	This endpoint expires a payment method and performs unlinking if necessary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiExpirePaymentMethodRequest
	*/
	ExpirePaymentMethod(ctx context.Context, paymentMethodId string) ApiExpirePaymentMethodRequest

	// ExpirePaymentMethodExecute executes the request
	//  @return PublicPaymentMethod
	ExpirePaymentMethodExecute(r ApiExpirePaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error)

	/*
	GetAllPaymentChannels Get all payment channels

	Get all payment channels

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllPaymentChannelsRequest
	*/
	GetAllPaymentChannels(ctx context.Context) ApiGetAllPaymentChannelsRequest

	// GetAllPaymentChannelsExecute executes the request
	//  @return PublicPaymentChannelList
	GetAllPaymentChannelsExecute(r ApiGetAllPaymentChannelsRequest) (*PublicPaymentChannelList, *http.Response, error)

	/*
	GetAllPaymentMethods Get all payment methods by filters

	Get all payment methods by filters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllPaymentMethodsRequest
	*/
	GetAllPaymentMethods(ctx context.Context) ApiGetAllPaymentMethodsRequest

	// GetAllPaymentMethodsExecute executes the request
	//  @return PublicPaymentMethodList
	GetAllPaymentMethodsExecute(r ApiGetAllPaymentMethodsRequest) (*PublicPaymentMethodList, *http.Response, error)

	/*
	GetPaymentMethodByID Get payment method by ID

	Get payment method by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiGetPaymentMethodByIDRequest
	*/
	GetPaymentMethodByID(ctx context.Context, paymentMethodId string) ApiGetPaymentMethodByIDRequest

	// GetPaymentMethodByIDExecute executes the request
	//  @return PublicPaymentMethod
	GetPaymentMethodByIDExecute(r ApiGetPaymentMethodByIDRequest) (*PublicPaymentMethod, *http.Response, error)

	/*
	PatchPaymentMethods Patch payment methods

	This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiPatchPaymentMethodsRequest
	*/
	PatchPaymentMethods(ctx context.Context, paymentMethodId string) ApiPatchPaymentMethodsRequest

	// PatchPaymentMethodsExecute executes the request
	//  @return PublicPaymentMethod
	PatchPaymentMethodsExecute(r ApiPatchPaymentMethodsRequest) (*PublicPaymentMethod, *http.Response, error)

	/*
	PublicGetPaymentsByPaymentMethodId Returns payments with matching PaymentMethodID.

	Returns payments with matching PaymentMethodID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiPublicGetPaymentsByPaymentMethodIdRequest
	*/
	PublicGetPaymentsByPaymentMethodId(ctx context.Context, paymentMethodId string) ApiPublicGetPaymentsByPaymentMethodIdRequest

	// PublicGetPaymentsByPaymentMethodIdExecute executes the request
	//  @return map[string]interface{}
	PublicGetPaymentsByPaymentMethodIdExecute(r ApiPublicGetPaymentsByPaymentMethodIdRequest) (map[string]interface{}, *http.Response, error)

	/*
	PublicSimulatePaymentByPaymentMethodId Makes payment with matching PaymentMethodID.

	Makes payment with matching PaymentMethodID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentMethodId
	@return ApiPublicSimulatePaymentByPaymentMethodIdRequest
	*/
	PublicSimulatePaymentByPaymentMethodId(ctx context.Context, paymentMethodId string) ApiPublicSimulatePaymentByPaymentMethodIdRequest

	// PublicSimulatePaymentByPaymentMethodIdExecute executes the request
	//  @return PublicSimulatePayment
	PublicSimulatePaymentByPaymentMethodIdExecute(r ApiPublicSimulatePaymentByPaymentMethodIdRequest) (*PublicSimulatePayment, *http.Response, error)

	/*
	PublicSimulatePaymentChannelHealth Simulate payment channel health to a given business id.

	Simulate payment channel health to a given business id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPublicSimulatePaymentChannelHealthRequest
	*/
	PublicSimulatePaymentChannelHealth(ctx context.Context) ApiPublicSimulatePaymentChannelHealthRequest

	// PublicSimulatePaymentChannelHealthExecute executes the request
	//  @return PublicSimulatePaymentChannelHealth
	PublicSimulatePaymentChannelHealthExecute(r ApiPublicSimulatePaymentChannelHealthRequest) (*PublicSimulatePaymentChannelHealth, *http.Response, error)
}

// PaymentmethodApiService PaymentmethodApi service
type PaymentmethodApiService struct {
	client common.IClient
}

// NewPaymentmethodApi Create a new PaymentmethodApi service
func NewPaymentmethodApi (client common.IClient) PaymentmethodApi {
	return &PaymentmethodApiService{
		client: client,
	}
}


type ApiAuthPaymentMethodRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	xIdempotencyKey *string
	publicAuthPaymentMethod *PublicAuthPaymentMethod
}

// Idempotency Key
func (r ApiAuthPaymentMethodRequest) XIdempotencyKey(xIdempotencyKey string) ApiAuthPaymentMethodRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiAuthPaymentMethodRequest) PublicAuthPaymentMethod(publicAuthPaymentMethod PublicAuthPaymentMethod) ApiAuthPaymentMethodRequest {
	r.publicAuthPaymentMethod = &publicAuthPaymentMethod
	return r
}

func (r ApiAuthPaymentMethodRequest) Execute() (*PublicPaymentMethod, *http.Response, error) {
	return r.ApiService.AuthPaymentMethodExecute(r)
}

/*
AuthPaymentMethod Validate a payment method's linking OTP

This endpoint validates a payment method linking OTP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiAuthPaymentMethodRequest
*/
func (a *PaymentmethodApiService) AuthPaymentMethod(ctx context.Context, paymentMethodId string) ApiAuthPaymentMethodRequest {
	return ApiAuthPaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PublicPaymentMethod
func (a *PaymentmethodApiService) AuthPaymentMethodExecute(r ApiAuthPaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethod
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.AuthPaymentMethod")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}/auth"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicAuthPaymentMethod
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v CreatePaymentMethod409Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CreatePaymentMethod503Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePaymentMethodRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	xIdempotencyKey *string
	publicCreatePaymentMethod *PublicCreatePaymentMethod
}

// Idempotency Key
func (r ApiCreatePaymentMethodRequest) XIdempotencyKey(xIdempotencyKey string) ApiCreatePaymentMethodRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiCreatePaymentMethodRequest) PublicCreatePaymentMethod(publicCreatePaymentMethod PublicCreatePaymentMethod) ApiCreatePaymentMethodRequest {
	r.publicCreatePaymentMethod = &publicCreatePaymentMethod
	return r
}

func (r ApiCreatePaymentMethodRequest) Execute() (*PublicPaymentMethod, *http.Response, error) {
	return r.ApiService.CreatePaymentMethodExecute(r)
}

/*
CreatePaymentMethod Creates payment method

This endpoint initiates creation of payment method

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePaymentMethodRequest
*/
func (a *PaymentmethodApiService) CreatePaymentMethod(ctx context.Context) ApiCreatePaymentMethodRequest {
	return ApiCreatePaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicPaymentMethod
func (a *PaymentmethodApiService) CreatePaymentMethodExecute(r ApiCreatePaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethod
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.CreatePaymentMethod")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicCreatePaymentMethod
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v CreatePaymentMethod409Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CreatePaymentMethod503Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpirePaymentMethodRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	xIdempotencyKey *string
	publicExpirePaymentMethod *PublicExpirePaymentMethod
}

// Idempotency Key
func (r ApiExpirePaymentMethodRequest) XIdempotencyKey(xIdempotencyKey string) ApiExpirePaymentMethodRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiExpirePaymentMethodRequest) PublicExpirePaymentMethod(publicExpirePaymentMethod PublicExpirePaymentMethod) ApiExpirePaymentMethodRequest {
	r.publicExpirePaymentMethod = &publicExpirePaymentMethod
	return r
}

func (r ApiExpirePaymentMethodRequest) Execute() (*PublicPaymentMethod, *http.Response, error) {
	return r.ApiService.ExpirePaymentMethodExecute(r)
}

/*
ExpirePaymentMethod Expires a payment method

This endpoint expires a payment method and performs unlinking if necessary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiExpirePaymentMethodRequest
*/
func (a *PaymentmethodApiService) ExpirePaymentMethod(ctx context.Context, paymentMethodId string) ApiExpirePaymentMethodRequest {
	return ApiExpirePaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PublicPaymentMethod
func (a *PaymentmethodApiService) ExpirePaymentMethodExecute(r ApiExpirePaymentMethodRequest) (*PublicPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethod
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.ExpirePaymentMethod")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}/expire"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicExpirePaymentMethod
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CreatePaymentMethod503Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllPaymentChannelsRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	isActivated *bool
	type_ *string
	xIdempotencyKey *string
}

func (r ApiGetAllPaymentChannelsRequest) IsActivated(isActivated bool) ApiGetAllPaymentChannelsRequest {
	r.isActivated = &isActivated
	return r
}

func (r ApiGetAllPaymentChannelsRequest) Type_(type_ string) ApiGetAllPaymentChannelsRequest {
	r.type_ = &type_
	return r
}

// Idempotency Key
func (r ApiGetAllPaymentChannelsRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetAllPaymentChannelsRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiGetAllPaymentChannelsRequest) Execute() (*PublicPaymentChannelList, *http.Response, error) {
	return r.ApiService.GetAllPaymentChannelsExecute(r)
}

/*
GetAllPaymentChannels Get all payment channels

Get all payment channels

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllPaymentChannelsRequest
*/
func (a *PaymentmethodApiService) GetAllPaymentChannels(ctx context.Context) ApiGetAllPaymentChannelsRequest {
	return ApiGetAllPaymentChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicPaymentChannelList
func (a *PaymentmethodApiService) GetAllPaymentChannelsExecute(r ApiGetAllPaymentChannelsRequest) (*PublicPaymentChannelList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentChannelList
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.GetAllPaymentChannels")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isActivated != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "is_activated", r.isActivated, "")
	}
	if r.type_ != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllPaymentMethodsRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	id *[]string
	type_ *[]string
	status *[]PaymentMethodStatus
	reusability *PaymentMethodReusability
	customerId *string
	referenceId *string
	afterId *string
	beforeId *string
	limit *int32
	xIdempotencyKey *string
}

func (r ApiGetAllPaymentMethodsRequest) Id(id []string) ApiGetAllPaymentMethodsRequest {
	r.id = &id
	return r
}

func (r ApiGetAllPaymentMethodsRequest) Type_(type_ []string) ApiGetAllPaymentMethodsRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetAllPaymentMethodsRequest) Status(status []PaymentMethodStatus) ApiGetAllPaymentMethodsRequest {
	r.status = &status
	return r
}

func (r ApiGetAllPaymentMethodsRequest) Reusability(reusability PaymentMethodReusability) ApiGetAllPaymentMethodsRequest {
	r.reusability = &reusability
	return r
}

func (r ApiGetAllPaymentMethodsRequest) CustomerId(customerId string) ApiGetAllPaymentMethodsRequest {
	r.customerId = &customerId
	return r
}

func (r ApiGetAllPaymentMethodsRequest) ReferenceId(referenceId string) ApiGetAllPaymentMethodsRequest {
	r.referenceId = &referenceId
	return r
}

func (r ApiGetAllPaymentMethodsRequest) AfterId(afterId string) ApiGetAllPaymentMethodsRequest {
	r.afterId = &afterId
	return r
}

func (r ApiGetAllPaymentMethodsRequest) BeforeId(beforeId string) ApiGetAllPaymentMethodsRequest {
	r.beforeId = &beforeId
	return r
}

func (r ApiGetAllPaymentMethodsRequest) Limit(limit int32) ApiGetAllPaymentMethodsRequest {
	r.limit = &limit
	return r
}

// Idempotency Key
func (r ApiGetAllPaymentMethodsRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetAllPaymentMethodsRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiGetAllPaymentMethodsRequest) Execute() (*PublicPaymentMethodList, *http.Response, error) {
	return r.ApiService.GetAllPaymentMethodsExecute(r)
}

/*
GetAllPaymentMethods Get all payment methods by filters

Get all payment methods by filters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllPaymentMethodsRequest
*/
func (a *PaymentmethodApiService) GetAllPaymentMethods(ctx context.Context) ApiGetAllPaymentMethodsRequest {
	return ApiGetAllPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicPaymentMethodList
func (a *PaymentmethodApiService) GetAllPaymentMethodsExecute(r ApiGetAllPaymentMethodsRequest) (*PublicPaymentMethodList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethodList
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.GetAllPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.reusability != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "reusability", r.reusability, "")
	}
	if r.customerId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "customer_id", r.customerId, "")
	}
	if r.referenceId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", r.referenceId, "")
	}
	if r.afterId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "after_id", r.afterId, "")
	}
	if r.beforeId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "before_id", r.beforeId, "")
	}
	if r.limit != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPaymentMethodByIDRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	xIdempotencyKey *string
}

// Idempotency Key
func (r ApiGetPaymentMethodByIDRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetPaymentMethodByIDRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiGetPaymentMethodByIDRequest) Execute() (*PublicPaymentMethod, *http.Response, error) {
	return r.ApiService.GetPaymentMethodByIDExecute(r)
}

/*
GetPaymentMethodByID Get payment method by ID

Get payment method by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiGetPaymentMethodByIDRequest
*/
func (a *PaymentmethodApiService) GetPaymentMethodByID(ctx context.Context, paymentMethodId string) ApiGetPaymentMethodByIDRequest {
	return ApiGetPaymentMethodByIDRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PublicPaymentMethod
func (a *PaymentmethodApiService) GetPaymentMethodByIDExecute(r ApiGetPaymentMethodByIDRequest) (*PublicPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethod
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.GetPaymentMethodByID")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPaymentMethodsRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	xIdempotencyKey *string
	publicPatchPaymentMethod *PublicPatchPaymentMethod
}

// Idempotency Key
func (r ApiPatchPaymentMethodsRequest) XIdempotencyKey(xIdempotencyKey string) ApiPatchPaymentMethodsRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiPatchPaymentMethodsRequest) PublicPatchPaymentMethod(publicPatchPaymentMethod PublicPatchPaymentMethod) ApiPatchPaymentMethodsRequest {
	r.publicPatchPaymentMethod = &publicPatchPaymentMethod
	return r
}

func (r ApiPatchPaymentMethodsRequest) Execute() (*PublicPaymentMethod, *http.Response, error) {
	return r.ApiService.PatchPaymentMethodsExecute(r)
}

/*
PatchPaymentMethods Patch payment methods

This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiPatchPaymentMethodsRequest
*/
func (a *PaymentmethodApiService) PatchPaymentMethods(ctx context.Context, paymentMethodId string) ApiPatchPaymentMethodsRequest {
	return ApiPatchPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PublicPaymentMethod
func (a *PaymentmethodApiService) PatchPaymentMethodsExecute(r ApiPatchPaymentMethodsRequest) (*PublicPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicPaymentMethod
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.PatchPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicPatchPaymentMethod
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublicGetPaymentsByPaymentMethodIdRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	paymentRequestId *[]string
	paymentMethodId2 *[]string
	referenceId *[]string
	paymentMethodType *[]PaymentMethodType
	channelCode *[]string
	status *[]string
	currency *[]string
	createdGte *time.Time
	createdLte *time.Time
	updatedGte *time.Time
	updatedLte *time.Time
	limit *int32
	afterId *string
	beforeId *string
	xIdempotencyKey *string
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) PaymentRequestId(paymentRequestId []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.paymentRequestId = &paymentRequestId
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) PaymentMethodId2(paymentMethodId2 []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.paymentMethodId2 = &paymentMethodId2
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) ReferenceId(referenceId []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.referenceId = &referenceId
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) PaymentMethodType(paymentMethodType []PaymentMethodType) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.paymentMethodType = &paymentMethodType
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) ChannelCode(channelCode []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.channelCode = &channelCode
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) Status(status []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.status = &status
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) Currency(currency []string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.currency = &currency
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) CreatedGte(createdGte time.Time) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) CreatedLte(createdLte time.Time) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) UpdatedGte(updatedGte time.Time) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.updatedGte = &updatedGte
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) UpdatedLte(updatedLte time.Time) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.updatedLte = &updatedLte
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) Limit(limit int32) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.limit = &limit
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) AfterId(afterId string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.afterId = &afterId
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) BeforeId(beforeId string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.beforeId = &beforeId
	return r
}

// Idempotency Key
func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) XIdempotencyKey(xIdempotencyKey string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiPublicGetPaymentsByPaymentMethodIdRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PublicGetPaymentsByPaymentMethodIdExecute(r)
}

/*
PublicGetPaymentsByPaymentMethodId Returns payments with matching PaymentMethodID.

Returns payments with matching PaymentMethodID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiPublicGetPaymentsByPaymentMethodIdRequest
*/
func (a *PaymentmethodApiService) PublicGetPaymentsByPaymentMethodId(ctx context.Context, paymentMethodId string) ApiPublicGetPaymentsByPaymentMethodIdRequest {
	return ApiPublicGetPaymentsByPaymentMethodIdRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PaymentmethodApiService) PublicGetPaymentsByPaymentMethodIdExecute(r ApiPublicGetPaymentsByPaymentMethodIdRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.PublicGetPaymentsByPaymentMethodId")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}/payments"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.paymentRequestId != nil {
		t := *r.paymentRequestId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_request_id", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_request_id", t, "multi")
		}
	}
	if r.paymentMethodId2 != nil {
		t := *r.paymentMethodId2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_method_id", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_method_id", t, "multi")
		}
	}
	if r.referenceId != nil {
		t := *r.referenceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", t, "multi")
		}
	}
	if r.paymentMethodType != nil {
		t := *r.paymentMethodType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_method_type", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "payment_method_type", t, "multi")
		}
	}
	if r.channelCode != nil {
		t := *r.channelCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "channel_code", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "channel_code", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.currency != nil {
		t := *r.currency
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "currency", s.Index(i), "multi")
			}
		} else {
			utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "currency", t, "multi")
		}
	}
	if r.createdGte != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "created[gte]", r.createdGte, "")
	}
	if r.createdLte != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "created[lte]", r.createdLte, "")
	}
	if r.updatedGte != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "updated[gte]", r.updatedGte, "")
	}
	if r.updatedLte != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "updated[lte]", r.updatedLte, "")
	}
	if r.limit != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.afterId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "after_id", r.afterId, "")
	}
	if r.beforeId != nil {
		utils.ParameterAddToHeaderOrQuery(localVarQueryParams, "before_id", r.beforeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CreatePaymentMethod503Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublicSimulatePaymentByPaymentMethodIdRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	paymentMethodId string
	xIdempotencyKey *string
	publicSimulatePaymentByPaymentMethodIdRequest *PublicSimulatePaymentByPaymentMethodIdRequest
}

// Idempotency Key
func (r ApiPublicSimulatePaymentByPaymentMethodIdRequest) XIdempotencyKey(xIdempotencyKey string) ApiPublicSimulatePaymentByPaymentMethodIdRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiPublicSimulatePaymentByPaymentMethodIdRequest) PublicSimulatePaymentByPaymentMethodIdRequest(publicSimulatePaymentByPaymentMethodIdRequest PublicSimulatePaymentByPaymentMethodIdRequest) ApiPublicSimulatePaymentByPaymentMethodIdRequest {
	r.publicSimulatePaymentByPaymentMethodIdRequest = &publicSimulatePaymentByPaymentMethodIdRequest
	return r
}

func (r ApiPublicSimulatePaymentByPaymentMethodIdRequest) Execute() (*PublicSimulatePayment, *http.Response, error) {
	return r.ApiService.PublicSimulatePaymentByPaymentMethodIdExecute(r)
}

/*
PublicSimulatePaymentByPaymentMethodId Makes payment with matching PaymentMethodID.

Makes payment with matching PaymentMethodID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId
 @return ApiPublicSimulatePaymentByPaymentMethodIdRequest
*/
func (a *PaymentmethodApiService) PublicSimulatePaymentByPaymentMethodId(ctx context.Context, paymentMethodId string) ApiPublicSimulatePaymentByPaymentMethodIdRequest {
	return ApiPublicSimulatePaymentByPaymentMethodIdRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return PublicSimulatePayment
func (a *PaymentmethodApiService) PublicSimulatePaymentByPaymentMethodIdExecute(r ApiPublicSimulatePaymentByPaymentMethodIdRequest) (*PublicSimulatePayment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicSimulatePayment
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.PublicSimulatePaymentByPaymentMethodId")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/{paymentMethodId}/payments/simulate"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentMethodId"+"}", url.PathEscape(utils.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicSimulatePaymentByPaymentMethodIdRequest
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetAllPaymentMethods404Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CreatePaymentMethod503Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublicSimulatePaymentChannelHealthRequest struct {
	ctx context.Context
	ApiService PaymentmethodApi
	publicPostSimulatePaymentChannelHealth *PublicPostSimulatePaymentChannelHealth
	xIdempotencyKey *string
}

func (r ApiPublicSimulatePaymentChannelHealthRequest) PublicPostSimulatePaymentChannelHealth(publicPostSimulatePaymentChannelHealth PublicPostSimulatePaymentChannelHealth) ApiPublicSimulatePaymentChannelHealthRequest {
	r.publicPostSimulatePaymentChannelHealth = &publicPostSimulatePaymentChannelHealth
	return r
}

// Idempotency Key
func (r ApiPublicSimulatePaymentChannelHealthRequest) XIdempotencyKey(xIdempotencyKey string) ApiPublicSimulatePaymentChannelHealthRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiPublicSimulatePaymentChannelHealthRequest) Execute() (*PublicSimulatePaymentChannelHealth, *http.Response, error) {
	return r.ApiService.PublicSimulatePaymentChannelHealthExecute(r)
}

/*
PublicSimulatePaymentChannelHealth Simulate payment channel health to a given business id.

Simulate payment channel health to a given business id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPublicSimulatePaymentChannelHealthRequest
*/
func (a *PaymentmethodApiService) PublicSimulatePaymentChannelHealth(ctx context.Context) ApiPublicSimulatePaymentChannelHealthRequest {
	return ApiPublicSimulatePaymentChannelHealthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PublicSimulatePaymentChannelHealth
func (a *PaymentmethodApiService) PublicSimulatePaymentChannelHealthExecute(r ApiPublicSimulatePaymentChannelHealthRequest) (*PublicSimulatePaymentChannelHealth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *PublicSimulatePaymentChannelHealth
	)

	localBasePath, err := a.client.GetConfig().ServerURLWithContext(r.ctx, "PaymentmethodApiService.PublicSimulatePaymentChannelHealth")
	if err != nil {
		return localVarReturnValue, nil, common.NewGenericOpenAPIError(nil, err.Error(), nil)
	}

	localVarPath := localBasePath + "/v2/payment_methods/channels/simulate_health"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicPostSimulatePaymentChannelHealth == nil {
		return localVarReturnValue, nil, utils.ReportError("publicPostSimulatePaymentChannelHealth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		utils.ParameterAddToHeaderOrQuery(localVarHeaderParams, "x-idempotency-key", r.xIdempotencyKey, "")
	}
	// body params
	localVarPostBody = r.publicPostSimulatePaymentChannelHealth
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := common.NewGenericOpenAPIError(localVarBody, localVarHTTPResponse.Status, nil)
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllPaymentMethods400Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetAllPaymentMethods403Response
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v GetAllPaymentMethodsDefaultResponse
			err = a.client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.SetError(err.Error())
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.SetError(utils.FormatErrorMessage(localVarHTTPResponse.Status, &v))
					newErr.SetModel(v)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := common.NewGenericOpenAPIError(localVarBody, err.Error(), nil)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
