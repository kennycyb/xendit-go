/*
Xendit API

Customer API description

API version: 2.0.0
*/

// Code generated by OpenAPI Generator; DO NOT EDIT.

package customer

import (
	"encoding/json"
	"github.com/kennycyb/xendit-go/utils"
)

// checks if the IndividualDetails type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IndividualDetails{}

// IndividualDetails struct for IndividualDetails
type IndividualDetails struct {
	GivenNames *string `json:"given_names,omitempty"`
	Surname *string `json:"surname,omitempty"`
	Nationality *string `json:"nationality,omitempty"`
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	Gender *string `json:"gender,omitempty"`
	Employment *string `json:"employment,omitempty"`
}

// NewIndividualDetails instantiates a new IndividualDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividualDetails() *IndividualDetails {
	this := IndividualDetails{}
	return &this
}

// NewIndividualDetailsWithDefaults instantiates a new IndividualDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualDetailsWithDefaults() *IndividualDetails {
	this := IndividualDetails{}
	return &this
}

// GetGivenNames returns the GivenNames field value if set, zero value otherwise.
func (o *IndividualDetails) GetGivenNames() string {
	if o == nil || utils.IsNil(o.GivenNames) {
		var ret string
		return ret
	}
	return *o.GivenNames
}

// GetGivenNamesOk returns a tuple with the GivenNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetGivenNamesOk() (*string, bool) {
	if o == nil || utils.IsNil(o.GivenNames) {
		return nil, false
	}
	return o.GivenNames, true
}

// HasGivenNames returns a boolean if a field has been set.
func (o *IndividualDetails) HasGivenNames() bool {
	if o != nil && !utils.IsNil(o.GivenNames) {
		return true
	}

	return false
}

// SetGivenNames gets a reference to the given string and assigns it to the GivenNames field.
func (o *IndividualDetails) SetGivenNames(v string) {
	o.GivenNames = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *IndividualDetails) GetSurname() string {
	if o == nil || utils.IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetSurnameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *IndividualDetails) HasSurname() bool {
	if o != nil && !utils.IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *IndividualDetails) SetSurname(v string) {
	o.Surname = &v
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *IndividualDetails) GetNationality() string {
	if o == nil || utils.IsNil(o.Nationality) {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetNationalityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Nationality) {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *IndividualDetails) HasNationality() bool {
	if o != nil && !utils.IsNil(o.Nationality) {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *IndividualDetails) SetNationality(v string) {
	o.Nationality = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *IndividualDetails) GetPlaceOfBirth() string {
	if o == nil || utils.IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *IndividualDetails) HasPlaceOfBirth() bool {
	if o != nil && !utils.IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *IndividualDetails) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *IndividualDetails) GetDateOfBirth() string {
	if o == nil || utils.IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetDateOfBirthOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *IndividualDetails) HasDateOfBirth() bool {
	if o != nil && !utils.IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *IndividualDetails) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *IndividualDetails) GetGender() string {
	if o == nil || utils.IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetGenderOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *IndividualDetails) HasGender() bool {
	if o != nil && !utils.IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *IndividualDetails) SetGender(v string) {
	o.Gender = &v
}

// GetEmployment returns the Employment field value if set, zero value otherwise.
func (o *IndividualDetails) GetEmployment() string {
	if o == nil || utils.IsNil(o.Employment) {
		var ret string
		return ret
	}
	return *o.Employment
}

// GetEmploymentOk returns a tuple with the Employment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualDetails) GetEmploymentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Employment) {
		return nil, false
	}
	return o.Employment, true
}

// HasEmployment returns a boolean if a field has been set.
func (o *IndividualDetails) HasEmployment() bool {
	if o != nil && !utils.IsNil(o.Employment) {
		return true
	}

	return false
}

// SetEmployment gets a reference to the given string and assigns it to the Employment field.
func (o *IndividualDetails) SetEmployment(v string) {
	o.Employment = &v
}

func (o IndividualDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndividualDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.GivenNames) {
		toSerialize["given_names"] = o.GivenNames
	}
	if !utils.IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !utils.IsNil(o.Nationality) {
		toSerialize["nationality"] = o.Nationality
	}
	if !utils.IsNil(o.PlaceOfBirth) {
		toSerialize["place_of_birth"] = o.PlaceOfBirth
	}
	if !utils.IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !utils.IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !utils.IsNil(o.Employment) {
		toSerialize["employment"] = o.Employment
	}
	return toSerialize, nil
}

type NullableIndividualDetails struct {
	value *IndividualDetails
	isSet bool
}

func (v NullableIndividualDetails) Get() *IndividualDetails {
	return v.value
}

func (v *NullableIndividualDetails) Set(val *IndividualDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualDetails(val *IndividualDetails) *NullableIndividualDetails {
	return &NullableIndividualDetails{value: val, isSet: true}
}

func (v NullableIndividualDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


