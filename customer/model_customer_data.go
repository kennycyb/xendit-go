/*
Xendit API

Customer API description

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package customer

import (
	"encoding/json"
	"github.com/kennycyb/xendit-go/utils"
)

// checks if the CustomerData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CustomerData{}

// CustomerData struct for CustomerData
type CustomerData struct {
	Id *string `json:"id,omitempty"`
	ReferenceId *string `json:"reference_id,omitempty"`
	Type *string `json:"type,omitempty"`
	IndividualDetails *IndividualDetails `json:"individual_details,omitempty"`
	BusinessDetails *string `json:"business_details,omitempty"`
	Email *string `json:"email,omitempty"`
	MobileNumber *string `json:"mobile_number,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	HashedPhoneNumber *string `json:"hashed_phone_number,omitempty"`
	Addresses []map[string]interface{} `json:"addresses,omitempty"`
	IdentityAccounts []map[string]interface{} `json:"identity_accounts,omitempty"`
	KycDocuments []map[string]interface{} `json:"kyc_documents,omitempty"`
	Description *string `json:"description,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Created *string `json:"created,omitempty"`
	Updated *string `json:"updated,omitempty"`
}

// NewCustomerData instantiates a new CustomerData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerData() *CustomerData {
	this := CustomerData{}
	return &this
}

// NewCustomerDataWithDefaults instantiates a new CustomerData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerDataWithDefaults() *CustomerData {
	this := CustomerData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerData) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerData) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomerData) SetId(v string) {
	o.Id = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *CustomerData) GetReferenceId() string {
	if o == nil || utils.IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetReferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *CustomerData) HasReferenceId() bool {
	if o != nil && !utils.IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *CustomerData) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomerData) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomerData) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CustomerData) SetType(v string) {
	o.Type = &v
}

// GetIndividualDetails returns the IndividualDetails field value if set, zero value otherwise.
func (o *CustomerData) GetIndividualDetails() IndividualDetails {
	if o == nil || utils.IsNil(o.IndividualDetails) {
		var ret IndividualDetails
		return ret
	}
	return *o.IndividualDetails
}

// GetIndividualDetailsOk returns a tuple with the IndividualDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetIndividualDetailsOk() (*IndividualDetails, bool) {
	if o == nil || utils.IsNil(o.IndividualDetails) {
		return nil, false
	}
	return o.IndividualDetails, true
}

// HasIndividualDetails returns a boolean if a field has been set.
func (o *CustomerData) HasIndividualDetails() bool {
	if o != nil && !utils.IsNil(o.IndividualDetails) {
		return true
	}

	return false
}

// SetIndividualDetails gets a reference to the given IndividualDetails and assigns it to the IndividualDetails field.
func (o *CustomerData) SetIndividualDetails(v IndividualDetails) {
	o.IndividualDetails = &v
}

// GetBusinessDetails returns the BusinessDetails field value if set, zero value otherwise.
func (o *CustomerData) GetBusinessDetails() string {
	if o == nil || utils.IsNil(o.BusinessDetails) {
		var ret string
		return ret
	}
	return *o.BusinessDetails
}

// GetBusinessDetailsOk returns a tuple with the BusinessDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetBusinessDetailsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BusinessDetails) {
		return nil, false
	}
	return o.BusinessDetails, true
}

// HasBusinessDetails returns a boolean if a field has been set.
func (o *CustomerData) HasBusinessDetails() bool {
	if o != nil && !utils.IsNil(o.BusinessDetails) {
		return true
	}

	return false
}

// SetBusinessDetails gets a reference to the given string and assigns it to the BusinessDetails field.
func (o *CustomerData) SetBusinessDetails(v string) {
	o.BusinessDetails = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CustomerData) GetEmail() string {
	if o == nil || utils.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CustomerData) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CustomerData) SetEmail(v string) {
	o.Email = &v
}

// GetMobileNumber returns the MobileNumber field value if set, zero value otherwise.
func (o *CustomerData) GetMobileNumber() string {
	if o == nil || utils.IsNil(o.MobileNumber) {
		var ret string
		return ret
	}
	return *o.MobileNumber
}

// GetMobileNumberOk returns a tuple with the MobileNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetMobileNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MobileNumber) {
		return nil, false
	}
	return o.MobileNumber, true
}

// HasMobileNumber returns a boolean if a field has been set.
func (o *CustomerData) HasMobileNumber() bool {
	if o != nil && !utils.IsNil(o.MobileNumber) {
		return true
	}

	return false
}

// SetMobileNumber gets a reference to the given string and assigns it to the MobileNumber field.
func (o *CustomerData) SetMobileNumber(v string) {
	o.MobileNumber = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *CustomerData) GetPhoneNumber() string {
	if o == nil || utils.IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetPhoneNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *CustomerData) HasPhoneNumber() bool {
	if o != nil && !utils.IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *CustomerData) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetHashedPhoneNumber returns the HashedPhoneNumber field value if set, zero value otherwise.
func (o *CustomerData) GetHashedPhoneNumber() string {
	if o == nil || utils.IsNil(o.HashedPhoneNumber) {
		var ret string
		return ret
	}
	return *o.HashedPhoneNumber
}

// GetHashedPhoneNumberOk returns a tuple with the HashedPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetHashedPhoneNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.HashedPhoneNumber) {
		return nil, false
	}
	return o.HashedPhoneNumber, true
}

// HasHashedPhoneNumber returns a boolean if a field has been set.
func (o *CustomerData) HasHashedPhoneNumber() bool {
	if o != nil && !utils.IsNil(o.HashedPhoneNumber) {
		return true
	}

	return false
}

// SetHashedPhoneNumber gets a reference to the given string and assigns it to the HashedPhoneNumber field.
func (o *CustomerData) SetHashedPhoneNumber(v string) {
	o.HashedPhoneNumber = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *CustomerData) GetAddresses() []map[string]interface{} {
	if o == nil || utils.IsNil(o.Addresses) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetAddressesOk() ([]map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *CustomerData) HasAddresses() bool {
	if o != nil && !utils.IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []map[string]interface{} and assigns it to the Addresses field.
func (o *CustomerData) SetAddresses(v []map[string]interface{}) {
	o.Addresses = v
}

// GetIdentityAccounts returns the IdentityAccounts field value if set, zero value otherwise.
func (o *CustomerData) GetIdentityAccounts() []map[string]interface{} {
	if o == nil || utils.IsNil(o.IdentityAccounts) {
		var ret []map[string]interface{}
		return ret
	}
	return o.IdentityAccounts
}

// GetIdentityAccountsOk returns a tuple with the IdentityAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetIdentityAccountsOk() ([]map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.IdentityAccounts) {
		return nil, false
	}
	return o.IdentityAccounts, true
}

// HasIdentityAccounts returns a boolean if a field has been set.
func (o *CustomerData) HasIdentityAccounts() bool {
	if o != nil && !utils.IsNil(o.IdentityAccounts) {
		return true
	}

	return false
}

// SetIdentityAccounts gets a reference to the given []map[string]interface{} and assigns it to the IdentityAccounts field.
func (o *CustomerData) SetIdentityAccounts(v []map[string]interface{}) {
	o.IdentityAccounts = v
}

// GetKycDocuments returns the KycDocuments field value if set, zero value otherwise.
func (o *CustomerData) GetKycDocuments() []map[string]interface{} {
	if o == nil || utils.IsNil(o.KycDocuments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.KycDocuments
}

// GetKycDocumentsOk returns a tuple with the KycDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetKycDocumentsOk() ([]map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.KycDocuments) {
		return nil, false
	}
	return o.KycDocuments, true
}

// HasKycDocuments returns a boolean if a field has been set.
func (o *CustomerData) HasKycDocuments() bool {
	if o != nil && !utils.IsNil(o.KycDocuments) {
		return true
	}

	return false
}

// SetKycDocuments gets a reference to the given []map[string]interface{} and assigns it to the KycDocuments field.
func (o *CustomerData) SetKycDocuments(v []map[string]interface{}) {
	o.KycDocuments = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomerData) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomerData) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomerData) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CustomerData) GetMetadata() map[string]interface{} {
	if o == nil || utils.IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CustomerData) HasMetadata() bool {
	if o != nil && !utils.IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CustomerData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CustomerData) GetCreated() string {
	if o == nil || utils.IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetCreatedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CustomerData) HasCreated() bool {
	if o != nil && !utils.IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *CustomerData) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *CustomerData) GetUpdated() string {
	if o == nil || utils.IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerData) GetUpdatedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *CustomerData) HasUpdated() bool {
	if o != nil && !utils.IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *CustomerData) SetUpdated(v string) {
	o.Updated = &v
}

func (o CustomerData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.IndividualDetails) {
		toSerialize["individual_details"] = o.IndividualDetails
	}
	if !utils.IsNil(o.BusinessDetails) {
		toSerialize["business_details"] = o.BusinessDetails
	}
	if !utils.IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !utils.IsNil(o.MobileNumber) {
		toSerialize["mobile_number"] = o.MobileNumber
	}
	if !utils.IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !utils.IsNil(o.HashedPhoneNumber) {
		toSerialize["hashed_phone_number"] = o.HashedPhoneNumber
	}
	if !utils.IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !utils.IsNil(o.IdentityAccounts) {
		toSerialize["identity_accounts"] = o.IdentityAccounts
	}
	if !utils.IsNil(o.KycDocuments) {
		toSerialize["kyc_documents"] = o.KycDocuments
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !utils.IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !utils.IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableCustomerData struct {
	value *CustomerData
	isSet bool
}

func (v NullableCustomerData) Get() *CustomerData {
	return v.value
}

func (v *NullableCustomerData) Set(val *CustomerData) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerData) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerData(val *CustomerData) *NullableCustomerData {
	return &NullableCustomerData{value: val, isSet: true}
}

func (v NullableCustomerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


